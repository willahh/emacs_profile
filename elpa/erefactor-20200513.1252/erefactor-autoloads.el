;;; erefactor-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from erefactor.el

(autoload 'erefactor-lazy-highlight-turn-on "erefactor")
(autoload 'erefactor-check-eval-mode "erefactor" "\
Display compiling warnings when \\[eval-last-sexp], \\[eval-defun]

This is a minor mode.  If called interactively, toggle the
`Erefactor-Check-Eval mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `erefactor-check-eval-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'erefactor-lint "erefactor" "\
Execuet Elint in new Emacs process." t)
(autoload 'erefactor-lint-by-emacsen "erefactor" "\
Execute Elint in new Emacs processes.
See variable `erefactor-lint-emacsen'." t)
(autoload 'erefactor-rename-symbol-in-package "erefactor" "\
Rename symbol at point with queries.
This affect to current buffer and requiring modules.

Please remember, this function only works well if
the module have observance of `require'/`provide' system.

(fn OLD-NAME NEW-NAME)" t)
(autoload 'erefactor-rename-symbol-in-buffer "erefactor" "\
Rename symbol at point resolving reference local variable
as long as i can with queries. This affect to current buffer.

(fn OLD-NAME NEW-NAME)" t)
(autoload 'erefactor-change-prefix-in-buffer "erefactor" "\
Rename symbol prefix with queries.

OLD-PREFIX: `foo-' -> NEW-PREFIX: `baz-'
`foo-function1' -> `baz-function1'
`foo-variable1' -> `baz-variable1'

(fn OLD-PREFIX NEW-PREFIX)" t)
(autoload 'erefactor-add-current-defun "erefactor" "\
Add current defun form to `load-history'
This is usefull when creating new definition." t)
(autoload 'erefactor-eval-current-defun "erefactor" "\
Evaluate current defun and add definition to `load-history'

(fn &optional EDEBUG-IT)" t)
(autoload 'erefactor-highlight-current-symbol "erefactor" "\
Highlight current symbol in this buffer.
Force to dehighlight \\[erefactor-dehighlight-all-symbol]" t)
(defvar erefactor-map (let ((map (make-sparse-keymap))) (define-key map "L" 'erefactor-lint-by-emacsen) (define-key map "R" 'erefactor-rename-symbol-in-package) (define-key map "A" 'erefactor-add-current-defun) (define-key map "c" 'erefactor-change-prefix-in-buffer) (define-key map "d" 'erefactor-dehighlight-all-symbol) (define-key map "h" 'erefactor-highlight-current-symbol) (define-key map "l" 'erefactor-lint) (define-key map "r" 'erefactor-rename-symbol-in-buffer) (define-key map "x" 'erefactor-eval-current-defun) (define-key map "?" 'erefactor-flymake-display-errors) map))
(add-hook 'emacs-lisp-mode-hook 'erefactor-lazy-highlight-turn-on)
(add-hook 'lisp-interaction-mode-hook 'erefactor-lazy-highlight-turn-on)
(register-definition-prefixes "erefactor" '("erefactor-"))

;;; End of scraped data

(provide 'erefactor-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; erefactor-autoloads.el ends here
