* Willahh emacs config
Emacs config in org mode.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

** init-packages
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
               '("gnu" . "https://elpa.gnu.org/packages/"))

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  ;; Package list
  (setq package-list '(
                       cider
                       clj-refactor
                       ac-slime
                       auto-indent-mode
                       ace-link
                       ace-window
                       hide-lines
                       actionscript-mode
                       ag
                       auto-complete
                       auto-yasnippet
                       autopair
                       avy
                       avy-menu
                       all-the-icons
                       browse-kill-ring
                       clojure-cheatsheet
                       clojure-snippets
                       company-quickhelp
                       company-tern
                       company-web
                       company-flx
                       counsel
                       counsel-gtags
                       crux
                       dash
                       diminish
                       diff-hl
                       diffview
                       drag-stuff
                       dumb-jump
                       easy-kill
                       editorconfig
                       emmet-mode
                       evil
                       exec-path-from-shell
                       expand-region
                       find-file-in-project
                       flx
                       flx-ido
                       flycheck-pos-tip
                       fullframe
                       ggtags
                       git-gutter
                       git-timemachine
                       google-translate
                       gradle-mode
                       helm
                       helm-ag
                       helm-cider
                       helm-projectile
                       helm-swoop
                       helm-flx
                       highlight-symbol
                       hy-mode
                       hydra
                       ido
                       ido-at-point
                       ido-occur
                       ido-vertical-mode
                       iedit
                       imenu-list
                       impatient-mode
                       indent-guide
                       inf-clojure
                       ivy
                       ivy-hydra
                       iy-go-to-char
                       js2-mode
                       js2-refactor
                       json-mode
                       key-chord
                       magit
                       markdown-mode
                       multiple-cursors
                       neotree
                       noflet ; Used by ido-preview
                       org-bullets
                       lsp-mode
                       pandoc-mode
                       paredit
                       paredit-everywhere
                       pdf-tools
                       php-auto-yasnippets
                       php-mode
                       pkg-info
                       popup
                       powerline
                       projectile
                       rainbow-delimiters
                       rainbow-mode
                       resize-window
                       shell-pop
                       slime
                       skewer-mode
                       smex
                       sml-mode
                       smooth-scrolling
                       smartparens
                       string-inflection
                       tern
                       tide
                       toc-org
                       typescript-mode
                       undo-tree
                       use-package
                       web-beautify
                       web-mode
                       websocket
                       wgrep
                       which-key
                       whole-line-or-region
                       xref-js2
                       yaml-mode
                       redshank ; Common lisp lib
                       erefactor ; Common lisp lib
                       yasnippet
                       zop-to-char
                       ace-jump-mode
                       with-editor ; Required by magit
               ))

  ;; Add some missing packages
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-mouse")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/vkill")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/syslog-mode-2.2")
  (add-to-list 'load-path "~/.emacs.d/site-lisp/tabbar")

  ;; Add additional files
  (load-file "~/.emacs.d/site-lisp/ido-preview.el")
  (load-file "~/.emacs.d/site-lisp/aggressive-indent.el")
  (load-file "~/.emacs.d/site-lisp/tabbar/aquamacs-tools.el")
  (load-file "~/.emacs.d/site-lisp/tabbar/aquamacs-compat.el")
  (load-file "~/.emacs.d/site-lisp/tabbar/aquamacs-tabbar.el")
  (load-file "~/.emacs.d/site-lisp/tabbar/aquamacs-tools.el")
  (load-file "~/.emacs.d/site-lisp/highlight-defined.el")
  (load-file "~/.emacs.d/site-lisp/auto-highlight-symbol-mode/auto-highlight-symbol-mode.el")
  (load-file "~/.emacs.d/site-lisp/auto-highlight-symbol-mode/auto-highlight-symbol-mode-config.el")
  (load-file "~/.emacs.d/site-lisp/dired-subtree-20160920.130/dired-subtree.el")

  ;; https://emacs.stackexchange.com/questions/5545/how-to-prevent-slow-down-when-an-inferior-processes-generates-long-lines
  (load-file "~/.emacs.d/site-lisp/so-long.el")
  (when (require 'so-long nil :noerror)
    (so-long-enable))

  ;; fetch the list of packages available 
  (unless package-archive-contents
    (package-refresh-contents))

  ; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

** custom
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ag-reuse-window nil)
 '(aggressive-indent-sit-for-time 0.2)
 '(bookmark-default-file "~/.emacs.d/tmp/bookmarks")
 '(cider-debug-display-locals nil)
 '(custom-safe-themes
   (quote
    ("6b2636879127bf6124ce541b1b2824800afc49c6ccd65439d6eb987dbf200c36" "b48150eac948d6de3f8103e6e92f105979277b91c96e9687c13f2d80977d381d" "b2c8ea4a3049e4399a4015f8eddb74fcd0473e9aa0c8818a04979230b22d0e75" default)))
 '(dired-recursive-deletes (quote always))
 '(ediff-diff-options "-w")
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(eshell-directory-name "~/.emacs.d/tmp/eshell/")
 '(fast-but-imprecise-scrolling t)
 '(global-diff-hl-mode t)
 '(helm-allow-mouse t)
 '(ido-save-directory-list-file "~/.emacs.d/tmp/ido.last")
 '(lsp-php-server-install-dir "~/.composer/")
 '(lsp-php-workspace-root-detectors
   (quote
    (lsp-php-root-projectile lsp-php-root-composer-json "index.php" "robots.txt")))
 '(mac-mouse-wheel-mode t)
 '(mc/always-repeat-command t)
 '(mc/cycle-looping-behaviour (quote continue))
 '(mouse-wheel-progressive-speed t)
 '(mouse-yank-at-point t)
 '(package-selected-packages
   (quote
    (org-babel-eval-in-repl workgroups doom-themes lsp-mode elein typed-clojure-mode auto-indent-mode dired-subtree smart-comment dired-ranger csv-mode highlight-defined elscreen erefactor redshank all-the-icons smartparens easy-kill string-inflection centered-window noflet ido-completing-read+ helm-flx company-flx diminish dumb-jump move-text cider indium treemacs-projectile treemacs hide-lines hy-mode elscreen-mew elscreen-fr flycheck-clojure ac-slime markdown-preview-mode diffview aggressive-indent counsel-gtags xref-js2 zop-to-char yaml-mode whole-line-or-region which-key wgrep websocket web-mode web-beautify visual-regexp-steroids visual-regexp validate use-package toc-org tide sx sourcemap smooth-scrolling sml-mode smex skewer-mode resize-window react-snippets rainbow-mode rainbow-delimiters psysh projectile-ripgrep powerline php-auto-yasnippets perspective pdf-tools paredit-everywhere paradox pandoc-mode ov org-bullets neotree monokai-theme magit key-chord json-mode js2-refactor js-comint jabber iy-go-to-char ivy-hydra intellij-theme inf-clojure indent-guide impatient-mode imenu-list image-dired+ iflipb iedit ido-vertical-mode ido-ubiquitous ido-occur ido-at-point ibuffer-vc highlight-symbol helm-swoop helm-projectile helm-ag gradle-mode google-translate git-timemachine git-gutter ggtags fullframe flycheck-pos-tip flx-ido find-file-in-project expand-region exec-path-from-shell evil-visualstar evil-surround evil-snipe evil-org evil-nerd-commenter evil-matchit evil-leader emmet-mode editorconfig edit-server eclim dtrt-indent drag-stuff dracula-theme diff-hl darkroom crux counsel company-web company-tern company-quickhelp coffee-mode clojure-snippets clojure-cheatsheet clj-refactor browse-kill-ring avy-menu autopair auto-yasnippet auto-complete ag actionscript-mode ace-window ace-link ace-jump-mode)))
 '(projectile-cache-file "~/.emacs.d/tmp/projectile.cache")
 '(recentf-save-file "~/.emacs.d/tmp/recentf")
 '(save-place-file "/~/.emacs.d/tmp/.places" t)
 '(scheme-program-name "guile")
 '(send-mail-function (quote smtpmail-send-it))
 '(shell-pop-full-span t)
 '(shell-pop-shell-type (quote ("eshell" "*eshell*" (lambda nil (eshell)))))
 '(smtpmail-smtp-server "smtp.gmail.com")
 '(smtpmail-smtp-service 587)
 '(sp-escape-quotes-after-insert nil)
 '(sp-escape-wrapped-region nil)
 '(tabbar-separator (quote (0.5)))
 '(url-configuration-directory "~/.emacs.d/tmp/url/"))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(diff-refine-added ((t (:inherit diff-added :inverse-video t))))
 '(diff-refine-removed ((t (:inherit diff-removed)))))
#+END_SRC
** require
#+BEGIN_SRC emacs-lisp
(require 'projectile)
(require 'php-mode)
(require 'nxml-mode)
(require 'whole-line-or-region)
(require 'iy-go-to-char)
(require 'smex)
(require 'which-key)
(require 'multiple-cursors)
(require 'key-chord)
(require 'which-key)
(require 'flx)
(require 'resize-window)
(require 'neotree)
(require 'expand-region)
(require 'paredit)
(require 'avy)
(require 'web-mode)
(require 'clojure-mode)
(require 'ggtags)
(require 'magit)
(require 'paredit)
(require 'iedit)
(require 'php-mode)
(require 'nxml-mode)
(require 'tern)
(require 'org)
(require 'conf-mode)
(require 'term)
(require 'web-mode)
(require 'typescript-mode)
(require 'css-mode)
(require 'slime)
(require 'css-mode)
(require 'emmet-mode)
(require 'highlight-symbol)
(require 'js2-mode)
(require 'cl-lib)
(require 'shell-pop)
(require 'evil)
(require 'bookmark)
(require 'thingatpt)
(require 'dash)
;; (require 'ov)
(require 'cl-lib)
;; (require 'validate)
(require 'exec-path-from-shell)

#+END_SRC
** base
#+BEGIN_SRC emacs-lisp
;; System -----------------------------
;; http://sriramkswamy.github.io/dotemacs/
;; Increase the garbage collection threshold to 500 MB to ease startup.
(setq gc-cons-threshold (* 500 1024 1024))

;; Garbage collector - decrease threshold to 20 MB after init.
;;"... By default Emacs will initiate GC every 0.76 MB allocated
;; (gc-cons-threshold == 800000). ... So if you have a modern machine, I
;; encourage you to add the following:..."
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 20 1024 1024))))

;; gc-cons-threshold
;; (setq-default gc-cons-percentage 0.4)

;; Warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; Always load newest byte code
(setq load-prefer-newer t)

;; Mac-Pass-Command-To-System
(setq mac-pass-command-to-system nil)

;; Fix snapy frame resize
;; https://emacs.stackexchange.com/a/30444
(setq frame-resize-pixelwise t)

;; Keyboard -----------------------------
(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'none
      mac-control-modifier 'control
      ns-function-modifier 'control)

;; Better defaults ----------------------
;; Don't replace line ending (Windows, Unix, Windows+Unix)
;; https://stackoverflow.com/a/10845302
(setq inhibit-eol-conversion t)

;; Disable annoying prompts and messages 
;; Use confirmation y and p instead of yes or not
(fset 'yes-or-no-p 'y-or-n-p)
(fset 'display-startup-echo-area-message #'ignore)

;; transient-mark-mode 
(setq transient-mark-mode t)

;; syntax highlighting everywhere
(global-font-lock-mode 1)

;; Long line
;; https://emacs.stackexchange.com/a/603
(setq bidi-display-reordering nil)

;; Delay re-rendering of font
(setq font-lock-support-mode 'jit-lock-mode)
(setq jit-lock-stealth-time 1000
	  jit-lock-defer-contextually t
      jit-lock-contextually t
	  jit-lock-stealth-nice 5
      jit-lock-context-time 10)
(setq-default font-lock-multiline t)
;; (jit-lock-debug-mode)

;; Encoding
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8-auto-unix)

;; Replace selection by text
(delete-selection-mode)

;; Disable ring bell icon
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; Allows navigation through the mark ring by doing C-u C-SPC once, then C-SPC
;; C-SPC.  instead of C-u C-SPC C-u C-SPC C-u C-SPC ...
(setq set-mark-command-repeat-pop t)

;; makes killing/yanking interact with clipboard X11 selection
(setq x-select-enable-clipboard t)

;; Disable loading of “default.el” at startup, in Fedora all it does is fix
;; window title which I rather configure differently
(setq inhibit-default-init t)

;; Backup -----------------------------
;; Disable backup
(setq backup-inhibited t)

;; Disable auto save
(setq auto-save-default nil)

;; No backup file
(setq make-backup-files nil)

;; -------------------------
;; Turn truncate lines off by default (like in many modern tools)
(set-default 'truncate-lines t)

;; Don't display "Reverting buffer ..." message
(setq auto-revert-verbose nil)

;; Confirm-Nonexistent-File-Or-Buffer
(setq confirm-nonexistent-file-or-buffer nil)

;; Disable auto underlining links
(setq goto-address-mode nil)

;; Don't popup warn
(add-to-list 'warning-suppress-types '(undo discard-info))

;; Keep cursor blinking
(blink-cursor-mode 1)

;; Don't write new line at end of document
(setq mode-require-final-newline nil)

;; Dont't wire new line after snippet
(setq require-final-newline nil)

;; Do startup message
(setq inhibit-startup-screen t)
(setq initial-scratch-message "")

;; Let's emacs use a different file to write in when updating via
;; customize-group
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

;; (when (file-exists-p custom-file)
;;   (load custom-file))

;; Display current file path in title
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
            '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;; Set default column width to 80
(set-default 'fill-column 80)

;; Emacs lets you move the current line to the top, middle or bottom of the
;; screen to get appropriate context. The default goes to the middle first. I
;; prefer that the default goes to the top first. Let’s change this.  (setq
;; recenter-positions '(top middle bottom)) (setq recenter-positions '(middle
;; top bottom)) ; recenter from the top instead of the middle
(setq recenter-positions '(middle top bottom)) ; recenter from the top instead of the middle

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; global-mark-ring-max
(setq global-mark-ring-max 500)

;; Repeating set-mark-command after popping mark pops it again.
(setq set-mark-command-repeat-pop t)

;; Disable toolbar
(tool-bar-mode -1)

;; Scrollbar
(scroll-bar-mode 1)

;; 
;; (smooth-scrolling-mode t)

;; make the left fringe 4 pixels wide and the right disappear
(fringe-mode '(12 . 0))

;; Make the flycheck arrow look like an exclamation point but only do it when
;; emacs runs in a window, not terminal
(when window-system
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    [0 24 24 24 24 24 24 0 0 24 24 0 0 0 0 0 0]))

;; Default cursor type to bar
(set-default 'cursor-type 'bar)

;; Enable window-divider
(setq window-divider-mode t)

;; Set window divider bottom and right
(setq window-divider-default-places t)

(window-divider-mode-apply 1)

;; Indentation -----------------------------
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-tabs-mode nil)
(setq tab-width 4)
(setq typescript-indent-level 4)
(setq js-indent-level 4)
(setq sgml-basic-offset 4)
(setq tab-always-indent 'complete) ;; From Prelude

;; ----------
;; Inserts newline to avoid `end of buffer' error. -> ?
(setq next-line-add-newlines t)

;; Scroll
(setq scroll-margin 0)
(setq scroll-step 1)

;; Mouse -----------------------------
;; Need to enable this mode to have modern mouse wheel behaviour
(mouse-wheel-mode t)
(setq mouse--progressive-speed 10)
(setq mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control) . nil))) ; 3 line at time (VS Code behaviour)
(setq mouse-wheel-progressive-speed t)
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

;; stops selection with a mouse being immediately injected to the kill ring
(setq mouse-drag-copy-region nil)
(setq x-select-enable-primary nil)

;; --------------
;; Shell
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")

;; Always display line and column numbers
(setq line-number-mode t)
(setq column-number-mode t)

;; Mini window height
(setq max-mini-window-height 0.25) ; default 0.25

;; Don't prompt for recursive delete
(setq dired-recursive-deletes 'always)

;; Save-Interprogram-Paste-Before-Kill
(setq save-interprogram-paste-before-kill t)

;; Remember the cursor position of files when reopening them
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
(setq apropos-do-all t
      mouse-yank-at-point t)

(setq search-whitespace-regexp nil)

;; Tramp
(setq tramp-default-method "ssh")

;; Set the default comment column to 80
(setq-default comment-column 80)

;; Background luminance (eww visibility on dark theme)
(setq shr-color-visible-luminance-min 100)

;; Abbrev
(setq default-abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/tmp/abbrev_defs")
(setq save-abbrevs t) ; save abbrevs when files are saved
(setq save-abbrevs 'silently)
(add-hook 'text-mode-hook (lambda () (abbrev-mode 1)))
(add-hook 'prog-mode-hook (lambda () (abbrev-mode 1)))

;; Always give focus to the help window when invoked
(setq help-window-select t)

;; Scroll -----------------------------
(setq-default horizontal-scroll-bar-mode nil)
(setq horizontal-scroll-bar-mode nil)
(setq-default horizontal-scroll-bar nil)
(setq horizontal-scroll-bar nil)

;; -------------------
;; Move to trash when deleting file
(setq delete-by-moving-to-trash t)

;; Transparently open compressed files
(auto-compression-mode t)

;; Disable mac frame tabs
;; (setq mac-frame-tabbing nil)
;; (setq mac-frame-tabbing t)
(setq mac-frame-tabbing nil)

;; Diff auto refine
(setq diff-auto-refine-mode t)

;; Directory first
(setq ls-lisp-dirs-first t)

;; Do not truncate words
(setq visual-line-mode t)

;; Word-wrap by word instead of character by default:
(setq-default word-wrap t)

;; display-time-mode
(display-time-mode 1)

;; Mac only - Use the spotlight service for locate command
(setq locate-command "mdfind")

;; Save -----------
;; Save emacs history
;; https://stackoverflow.com/a/1230877
(setq savehist-additional-variables
      '(search-ring regexp-search-ring)
      savehist-autosave-interval 60
      savehist-file "~/.emacs.d/tmp/savehist")
(savehist-mode +1)

;; Automatically save and restore sessions
;; https://stackoverflow.com/a/4485083
(setq desktop-dirname             "~/.emacs.d/tmp/"
      desktop-base-file-name      "emacs.desktop"
      desktop-base-lock-name      "lock"
      desktop-path                (list desktop-dirname)
      desktop-save                t
      desktop-files-not-to-save   "^$" ;reload tramp paths
      desktop-load-locked-desktop nil
      desktop-auto-save-timeout   10)

(desktop-save-mode 1)

;; Syntax entry
;; Syntax entry for web mode doesnt work actualy
;; https://github.com/fxbois/web-mode/issues/149
;; Select whole word when separated with _
(defun update-syntax-entry ()
  (modify-syntax-entry ?_ "w")
  (modify-syntax-entry ?\$ "w"))

(update-syntax-entry)
(add-hook 'prog-mode-hook (lambda () (update-syntax-entry)))
(add-hook 'web-mode-hook (lambda () (update-syntax-entry))) ;; Needed for web-mode

(put 'scroll-left 'disabled nil)

;; Display some buffer in current window
(setq display-buffer-alist
      '(
        ("*vc-dir*"               . (display-buffer-same-window . nil))
        ("*vc-change-log*"        . (display-buffer-same-window . nil))
        ("*ag*"                   . (display-buffer-same-window . nil))
        ;; ("*vc-diff*"               . (display-buffer-same-window . nil))
        ;; ("*vc-diff*"               . (display-buffer-same-window . nil))
        ;; ("*vc-change-log*"            . (display-buffer-same-window . nil))
        ;; ("*shell*"            . (display-buffer-same-window . nil))
        ;; ("*Google Translate*" . (display-buffer-same-window . nil))
        ))

#+END_SRC
** wlh-project
#+BEGIN_SRC emacs-lisp
(defvar wlh/workspace-list '("~/"
                             "~/Desktop/"
                             "~/Documents/"
                             "~/Downloads/"
                             "~/Project-a"))

(defun wlh/workspace-add-vc-view (workspace-dir vc-dir)
  (if (file-exists-p (concat workspace-dir vc-dir))
      (progn
        (vc-dir (concat workspace-dir vc-dir))
             (hrs/split-window-below-and-switch)
             (balance-windows))))

(defun wlh/workspace-get-subdirs (dir)
  "Return a list of sub directory for the project."
  (interactive)
  (seq-filter (lambda (a)
                (if (not (equal a "."))
                    (if (not (equal a ".."))
                        (if (not (equal a ".metadata"))
                            (if (not (equal a ".DS_Store"))
                                (if (not (equal a "cron"))
                                    a
                                  nil)
                              nil)
                          nil)
                      nil)
                  nil)) (directory-files dir)))

(defun wlh/workspace-action-1 (x)
  (interactive)
  (delete-other-windows)
  (hrs/split-window-right-and-switch)
  (find-file x)
  (other-window 1)
  (mapcar (lambda(subdir)
            (wlh/workspace-add-vc-view x subdir)) (wlh/workspace-get-subdirs x))
   (other-window 1)
   (window-resize (selected-window) 1 -100))

(defun my-action-2 (x) (message "action-2: %s" x))
(defun my-action-3 (x) (message "action-3: %s" x))

(defun wlh/workspace-search ()
  (interactive)
  (ivy-read "test: " wlh/workspace-list
            :action '(1 ("o" wlh/workspace-action-1 "action 1")
                        ("j" my-action-2 "action 2")
                        ("k" my-action-3 "action 3"))))

(defun wlh/html-to-hiccup ()
  (interactive)
  (let* ((html (read-string "html:"))
         (str2 (concat "java -jar " (expand-file-name "~") "/.emacs.d/bin/tohiccup.jar" " " "\"" html "\"")))
    (first (rest (split-string (shell-command-to-string str2) "\n")))))
#+END_SRC
** wlh-defun
#+BEGIN_SRC emacs-lisp
(defun wlh/html-to-hiccup ()
  "Convert html to clojure hiccup.
  tohiccup.jar is needed"
  (interactive)
  (let* ((html (read-string "html:"))
         (str2 (concat "java -jar " (expand-file-name "~") "/.emacs.d/bin/tohiccup.jar" " " "\"" html "\""))
         (output (first (rest (split-string (shell-command-to-string str2) "\n")))))
    (insert-string output)))

(defun wlh/mysql-dump ()
  "Prompt for a mysql dump command."
  (interactive)
  (require 'ido)
  (let* ((bdd-list '("glurps" "bdd-a" "bdd-b"))
         (bdd (ido-completing-read "bdd" bdd-list))
         (filepath (read-directory-name "Directory:"))
         (default-filename "dump")
         (filename (read-string "File name (without extension) (default: dump)"))
         (filename-cleanup 
          (if (equal filename "")
              default-filename filename))
         (mysql-str (concat "mysqldump" " " "-uroot" " " "-proot" " " bdd " " ">" " " filepath filename-cleanup ".sql")))
    (async-shell-command mysql-str)))

(defun wlh/frame-position-1 (frame)
  "Most used frame configuration (x, y, width, height). Depends
on the screen values."
  (interactive)
  (let* ((frame-width (/ (x-display-pixel-width) 3))
         (frame-height (/ (x-display-pixel-height) 2))
         (frame-x (- (/ (x-display-pixel-width) 4)))
         (frame-y (- frame-height 100)))
    (set-frame-size frame frame-width frame-height t)
    (set-frame-position frame frame-x frame-y)))

;; (defun wlh/neotree-set ()
;;   (interactive)
;;   (neo-global--open-and-find (buffer-file-name)))

(defun wlh/projectile-ido-find-file ()
  "Find a recent file using ido."
  (interactive)
  (let ((file (ido-completing-read "Project file: "
                                   (mapcar #'abbreviate-file-name (projectile-current-project-files))
                                   nil t)))
    (when file
      (find-file file))))

(defun wlh/vscode-dired-at-point ()
  "Open a VS Code at point from dired"
  (interactive)
  (let ((default-directory (dired-dwim-target-directory)))
    (shell-command "code")))

(defun wlh/pdf-view-mode-hook ()
  (define-key pdf-view-mode-map (kbd ".") 'hydra-pdftools/body))

;; Center frame
;; x-display-width / 4 because of retinata double ratio (should be / 2)
;; Only works in emacs-osx build
(defun wlh/frame-center ()
  (interactive)
  (set-frame-position (selected-frame) (- (/ (x-display-pixel-width) 4) (/ (frame-pixel-width) 2)) (- (/ (x-display-pixel-width) 4) (frame-pixel-height))))

;; custom
(defun wlh/open-projectile-bookmarks ()
  ;; Find pdf files in user directory
  (interactive)
  (find-file "~/.emacs.d/tmp/projectile-bookmarks.eld"))

(defun wlh/delete-backspace ()
  ;; delete the selection or forward-char
  (interactive)
  (if (region-active-p) (delete-region (region-beginning) (region-end)) (delete-forward-char 1)))

(defun wlh/org-open-main()
  (interactive)
  (select-frame (make-frame))
  (funcall #'find-file "~/org/main.org")
  (wlh/frame-center))

(defun wlh/org-open-emacs()
  (interactive)
  (select-frame (make-frame))
  (funcall #'find-file "~/.emacs.d/todo.org")
  (wlh/frame-center))

(defun wlh/open-logs
    (interactive)
  (dired "~/www/logs"))

(defun wlh/yank-and-indent-region ()
  ;; Yank and indent region
  (interactive)
  (yank)
  (call-interactively 'indent-region))

(defun wlh/svn-up-recursive ()
  "Svn update recursivly"
  (interactive)
  (shell-command "svn_up_recursive"))

(defun wlh/copy ()
  (interactive)
  (easy-kill)
  (deactivate-mark))

(defun wlh/html-to-concat ()
  "Convert a string into a concation for php [WIP]"
  (interactive)
  (move-beginning-of-line 1)
  (set-mark (point))
  (move-end-of-line 1))

(defun wlh/dired-new-dir (name)
  (interactive "sName: ")
  (mkdir name))

(defun wlh/js-insert-semicon-end-of-sexp()
  "Insert a semicon at the end of the next sexp"
  (interactive)
  (let ((x (point)))
    (end-of-line)
    (backward-char)
    (sp-forward-sexp)
    (move-end-of-line 1)
    (insert ";")
    (goto-char (point))))

(defun wlh/ag-open-new-window ()
  (interactive)
  (progn (setq ag-reuse-window nil)
         (compile-goto-error)
         (setq ag-reuse-window t)))

(defun wlh/wlh/create-new-centered-frame ()
  (interactive)
  (wlh/create-new-centered-frame)
  (text-mode))

(defun wlh/org-open-line-above ()
  (interactive)
  (open-line-above)
  (beginning-of-line)
  (kill-line))

(defun wlh/org-open-line-below ()
  (interactive)
  (open-line-below)
  (beginning-of-line)
  (kill-line))

(defun wlh/vc-status ()
  "Switch to either SVN status or GIT status"
  (interactive)
  (let ((vc-type (vc-backend (copy-file-path))))
    (if (string= vc-type "SVN")
        (wlh/vc-dir)
      (magit-status))))

(defun wlh/open-file-in-browser ()
  (interactive)
  (buffer-file-name))

(defun wlh/browse-url-at-point (x)
  (interactive "P")
  (if (equal 4 (first x))
      ;; Universal argument passed
      (browse-url (thing-at-point 'url))
    ;; Standard
    (eww (thing-at-point 'url))))

(defun wlh/recenter-top-bottom ()
  "Call recenter-top-bottom then do a beacon-blink"
  (interactive)
  (recenter-top-bottom))

(defun wlh/other-window () 
  (interactive)
  (other-window 1)
  (hydra-window/body))

(defun wlh/create-new-centered-frame ()
  "New centered frame."
  (interactive)
  (let ((frame (make-frame)))
    (select-frame frame)
    (set-frame-size frame 190 70)
    (funcall #'switch-to-buffer (xah-new-empty-buffer))    
    (wlh/frame-position-1 frame)))

(defun wlh/find-org-files ()
  "Find org files in user directory."
  (interactive)
  (find-name-dired "~/" "*.org"))

(defun wlh/find-org-files-in-directory ()
  "Find org files in current directory."
  (interactive)
  (find-name-dired default-directory "*.org"))

(defun wlh/delete-window ()
  "Close tab if multiple tabs are present in window, close window
  if there is just one tab."
  (interactive)
  (if tabbar-mode
      (if (eql (length (tabbar-tabs tabbar-current-tabset)) 1)
          (condition-case nil
              (delete-window)
            (message "ok"))
        (tabbar-close-tab))
    (if (< 1 (count-windows))
        (delete-window)
      (delete-frame))))

(defun wlh/join-line ()
  (interactive)
  (paredit-kill)
  (just-one-space))

(defun wlh/web-mode-kill-sexp ()
  (interactive)
  (cond ((equal (web-mode-language-at-pos) "html") (kill-sexp))
        ((equal (web-mode-language-at-pos) "javascript") (sp-kill-hybrid-sexp 1))
        ((equal (web-mode-language-at-pos) "php") (paredit-kill))
        ((equal (web-mode-language-at-pos) "css") (paredit-kill))))

(defun wlh/previous-window ()
  (interactive)
  (other-window -1))

(defun wlh/web-mode-tab ()
  (interactive)
  (cond ((string-equal (web-mode-language-at-pos) "html")
         (if (not (emmet-expand-line nil))
             (indent-for-tab-command))
         (condition-case err (yas-expand-from-trigger-key) (error "Error")))
        ((string-equal (web-mode-language-at-pos) "javascript")
         (indent-for-tab-command))
        ((string-equal (web-mode-language-at-pos) "css")
         (indent-for-tab-command))
        ((string-equal (web-mode-language-at-pos) "php")
         (indent-for-tab-command))))

(defun wlh/next-buffer ()
  "Navigate to the next buffer, use tabbar if the mode is active,
otherwise next-buffer"
  (interactive)
  (if tabbar-mode
    (tabbar-forward-tab)
    (next-buffer)))

(defun wlh/previous-buffer ()
  "Navigate to the previous buffer, use tabbar if the mode is active,
otherwise previous-buffer"
  (interactive)
  (if tabbar-mode
      (tabbar-backward-tab)
    (previous-buffer)))

(defun wlh/project-browser-open ()
  "Browse project url root."
  (interactive)
  (browse-url (concat "http://192.168.0.26/" (string-join (cddddr (split-string (projectile-project-root) "/")) "/"))))
#+END_SRC
** defun
#+BEGIN_SRC emacs-lisp
;; yank-pop-forwards
(defun yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))

(defun wlh/revert-buffer ()
  "Save the current position to tmp, then call revert-buffer,
  then goto-char(position)"
  (interactive)
  (defvar tmp)
  (setq tmp (point))
  (revert-buffer t t)
  (goto-char tmp)
  (kill-local-variable 'tmp))

(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
 If there's no region, the current line will be duplicated. However, if
 there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))

;; Source : https://www.emacswiki.org/emacs/DuplicayoartOfLineOrRegion
;; Update to use duplicate-current-line-or-region instead of duplicate-start-of-line
(defun duplicate-start-of-line-or-region ()
  (interactive)
  (if mark-active
      (duplicate-region)
    (duplicate-current-line-or-region 1)))

(defun duplicate-region ()
  (let* ((end (region-end))
         (text (buffer-substring (region-beginning)
                                 end)))
    (goto-char end)
    (insert text)
    (push-mark end)
    (setq deactivate-mark nil)
    (exchange-point-and-mark)))

;; File-path to clipboard
;; Besoin initial :
;;   Pouvoir copier le chemin du buffer actuel dans le clipboard
;; Source : http://stackoverflow.com/a/2417617
;; Update : add w- prefix for quicker find in m-x command
(defun copy-file-path ()
  "Copy current file path into clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

(defun cfp ()
  "[C]opy [f]ile [p]ath"
  (interactive)
  (copy-file-path))

;; copy-file-name-to-clipboard
;; Source : http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(defun move-line-region-up (&optional start end n)
  (interactive "r\np")
  (if (use-region-p) (move-region-up start end n) (move-line-up n)))

(defun move-line-region-down (&optional start end n)
  (interactive "r\np")
  (if (use-region-p) (move-region-down start end n) (move-line-down n)))

;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; Dont prompt me when quit
;; Source : http://emacs.stackexchange.com/a/24602
(defun disable-y-or-n-p (orig-fun &rest args)
  (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
    (apply orig-fun args)))

;; Indent - unindent
;; Source http://stackoverflow.com/a/35183657
;; Updated to just use for back indent, forward indent is
(defun custom-indent-region(numSpaces)
  (progn
    ;; default to start and end of current line
    (setq regionStart (line-beginning-position))
    (setq regionEnd (line-end-position))

    ;; if there's a selection, use that instead of the current line
    (when (use-region-p)
      (setq regionStart (region-beginning))
      (setq regionEnd (region-end)))

    (save-excursion ; restore the position afterwards
      (goto-char regionStart) ; go to the start of region
      (setq start (line-beginning-position)) ; save the start of the line
      (goto-char regionEnd) ; go to the end of region
      (setq end (line-end-position)) ; save the end of the line

      (indent-rigidly start end numSpaces) ; indent between start and end
      (setq deactivate-mark nil) ; restore the selected region
      )))

(defun untab-region (N)
  (interactive "p")
  (custom-indent-region -4))

;; Source : https://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

;; http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
(define-prefix-command 'endless/toggle-map)

;; The manual recommends C-c for user keys, but C-x t is
;; always free, whereas C-c t is used by some modes.
(define-key ctl-x-map "t" 'endless/toggle-map)

;;; Generalized version of `read-only-mode'.
(define-key endless/toggle-map "r" #'dired-toggle-read-only)
(autoload 'dired-toggle-read-only "dired" nil t)
(define-key endless/toggle-map "w" #'whitespace-mode)

(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(define-key endless/toggle-map "n" #'narrow-or-widen-dwim)

;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only
;; copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)

;; (add-hook 'LaTeX-mode-hook
;;           (lambda ()
;;             (define-key LaTeX-mode-map "\C-xn"
;;               nil)))

;; http://endlessparentheses.com/faster-pop-to-mark-command.html
;; Prevent emacs from adding same entries in the mark ring... usefull !
(defun modi/multi-pop-to-mark (orig-fun &rest args)
  "Call ORIG-FUN until the cursor moves.
Try the repeated popping up to 10 times."
  (let ((p (point)))
    (dotimes (i 10)
      (when (= p (point))
        (apply orig-fun args)))))

(advice-add 'pop-to-mark-command :around
            #'modi/multi-pop-to-mark)

;; Switch and rebalance windows when splitting
;; https://github.com/hrsp/dotfiles/blob/master/emacs.d/configuration.org
(defun hrs/split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun hrs/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (other-window 1))

(defun xah-toggle-letter-case ()
  "Toggle the letter case of current word or text selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
Version 2017-04-19"
  (interactive)
  (let (
        (deactivate-mark nil)
        -p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning)
              -p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alnum:]-_")
        (setq -p1 (point))
        (skip-chars-forward "[:alnum:]-_")
        (setq -p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region -p1 -p2)
      (put this-command 'state 1))
     ((equal 1  (get this-command 'state))
      (upcase-region -p1 -p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region -p1 -p2)
      (put this-command 'state 0)))))

;; https://stackoverflow.com/a/9697222
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(defun m-eshell-hook ()
  (define-key eshell-mode-map (kbd "C-M-l") 'er/contract-region))

;; From : http://www.blogbyben.com/2016/08/emacs-php-modern-and-far-more-complete.html
(defun toggle-php-flavor-mode ()
  (interactive)
  "Toggle mode between PHP & Web-Mode Helper modes"
  ;; (cond ((string= mode-name "PHP")
  (cond ((string= mode-name "PHP/l")
         (web-mode))
        ((string= mode-name "Web")
         (php-mode))))

;; Increment at point
;; https://www.emacswiki.org/emacs/IncrementNumber
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

(defun increment-number-at-point-by-10 ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (+ 10 (string-to-number (match-string 0))))))

(defun decrement-number-at-point ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

(defun decrement-number-at-point-by-10 ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (- (string-to-number (match-string 0)) 10))))

;; Hydra for incremnet at point
(defhydra wlh/hydra-increment-at-point (:color teal :columns 5
                                               :after-exit (wlh/hydra-increment-at-point/body))
  "Increment at point"
  ("p" increment-number-at-point)
  ("n" decrement-number-at-point)
  ("P" increment-number-at-point-by-10)
  ("N" decrement-number-at-point-by-10))

;; https://www.emacswiki.org/emacs/HalfScrolling
(defun window-half-height ()
  (max 1 (/ (1- (window-height (selected-window))) 2)))

(defun scroll-up-half ()
  (interactive)
  (scroll-up (window-half-height)))

(defun scroll-down-half ()
  (interactive)
  (scroll-down (window-half-height)))

;; From prelude
;; Compilation from Emacs
(defun prelude-colorize-compilation-buffer ()
  "Colorize a compilation mode buffer."
  (interactive)
  ;; we don't want to mess with child modes such as grep-mode, ack, ag, etc
  (when (eq major-mode 'compilation-mode)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max)))))

;; https://stackoverflow.com/a/32002122
(defun jrh-isearch-with-region ()
  "Use region as the isearch text."
  (when mark-active
    (let ((region (funcall region-extract-function nil)))
      (deactivate-mark)
      (isearch-push-state)
      (isearch-yank-string region))))

(add-hook 'isearch-mode-hook #'jrh-isearch-with-region)

;; http://emacsredux.com/blog/2013/05/30/joining-lines/
(defun join-region (beg end)
  "Apply join-line over region."
  (interactive "r")
  (if mark-active
      (let ((beg (region-beginning))
            (end (copy-marker (region-end))))
        (goto-char beg)
        (while (< (point) end)
          (join-line 1)))))

(defun swiper--from-isearch ()
  "Invoke `swiper' from isearch. https://github.com/ShingoFukuyama/helm-swoop/blob/f67fa8a4fe3b968b7105f8264a96da61c948a6fd/helm-swoop.el#L657-668"
  (interactive)
  (let (($query (if isearch-regexp
                    isearch-string
                  (regexp-quote isearch-string))))
    (isearch-exit)
    (swiper $query)))

;; Better forward-paragraph backward-paragraph
;; https://superuser.com/a/685604
(defun lawlist-forward-paragraph ()
  "http://superuser.com/a/685604/206164"
  (interactive "^")
  (let ((opoint (point)))
    (skip-chars-forward "\s\t\n\r")
    (re-search-forward "^\n" nil t)
    (skip-chars-forward "\s\t\n\r")
    (when (= opoint (point))
      (goto-char (point-max)))))

(defun lawlist-backward-paragraph ()
  (interactive "^")
  (let ((opoint (point)))
    (skip-chars-backward "\s\t\n\r")
    (re-search-backward "^\n" nil t)
    (skip-chars-forward "\s\t\n\r")
    (when (<= opoint (point))
      (goto-char (point-min)))))

(defun xah-new-empty-buffer ()
  "Create a new empty buffer."
  (interactive)
  (let ((-buf (generate-new-buffer "untitled")))
    (switch-to-buffer -buf)
    (funcall initial-major-mode)
    (setq buffer-offer-save t)))

;; Disable mini buffer messages
;; https://emacs.stackexchange.com/a/19747
(defun my-command-error-function (data context caller)
  "Ignore the buffer-read-only signal   ; pass the rest to the default handler."
  (when (not (eq (car data) 'buffer-read-only))
    (command-error-default-function data context caller)))

(setq command-error-function #'my-command-error-function)

(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)


;; Kill shell process without asking, i do trust (hope) !
;; https://emacs.stackexchange.com/questions/17005/killing-ansi-term-says-has-a-running-process
(defun set-no-process-query-on-exit ()
  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))

;; ---------- defadvice
(defadvice dired-readin
    (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding marks."
  (mydired-sort))

;; Focus on the result window after doing ag
(defadvice mouse-set-point (after wlh/mouse-set-point-advice (event &optional promote-to-region) activate)
  "Advice mouse click to remove multi cursors when present."
  (when (> (mc/num-cursors) 1)
    (mc/remove-fake-cursors)))

(defadvice ag (after wlh-ag-before activate)
  (other-window 1))

(defadvice apropos (after wlh-apropos-before activate)
  (other-window 1))

(defadvice man (after wlh-man-before activate)
  (other-window 1))

;; Full screen magit-status.
;; http://whattheemacsd.com/
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

;; ffap advice
;; Check ffap string for line-number and goto it (using advice)
;; https://www.emacswiki.org/emacs/FindFileAtPoint
(defvar ffap-file-at-point-line-number nil
  "Variable to hold line number from the last `ffap-file-at-point' call.")

(defadvice ffap-file-at-point (after ffap-store-line-number activate)
  "Search `ffap-string-at-point' for a line number pattern and
save it in `ffap-file-at-point-line-number' variable."
  (let* ((string (ffap-string-at-point)) ;; string/name definition copied from `ffap-string-at-point'
         (name
          (or (condition-case nil
                  (and (not (string-match "//" string)) ; foo.com://bar
                       (substitute-in-file-name string))
                (error nil))
              string))
         (line-number-string 
          (and (string-match ":[0-9]+" name)
               (substring name (1+ (match-beginning 0)) (match-end 0))))
         (line-number
          (and line-number-string
               (string-to-number line-number-string))))
    (if (and line-number (> line-number 0)) 
        (setq ffap-file-at-point-line-number line-number)
      (setq ffap-file-at-point-line-number nil))))

(defadvice find-file-at-point (after ffap-goto-line-number activate)
  "If `ffap-file-at-point-line-number' is non-nil goto this line."
  (when ffap-file-at-point-line-number
    (goto-line ffap-file-at-point-line-number)
    (setq ffap-file-at-point-line-number nil)))

(defun describe-thing-in-popup ()
  "http://blog.jenkster.com/2013/12/popup-help-in-emacs-lisp.html"
  (interactive)
  (let* ((thing (symbol-at-point))
         (help-xref-following t)
         (description (with-temp-buffer
                        (help-mode)
                        (help-xref-interned thing)
                        (buffer-string))))
    (popup-tip description
               :point (point)
               :around t
               :height 30
               :scroll-bar t
               :margin t)))

(global-set-key (kbd "M-'") 'describe-thing-in-popup)

;; http://emacsredux.com/blog/2013/04/21/edit-files-as-root/
(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
(global-set-key (kbd "C-x C-r") 'sudo-edit)

(defun backward-kill-word-or-region (&optional arg)
  "Calls `kill-region' when a region is active and
`backward-kill-word' otherwise. ARG is passed to
`backward-kill-word' if no region is active."
  (interactive "p")
  (if (region-active-p)
      ;; call interactively so kill-region handles rectangular selection
      ;; correctly (see https://github.com/syl20bnr/spacemacs/issues/3278)
      (call-interactively #'kill-region)
    ;; (backward-kill-word arg)
    (paredit-backward-kill-word)))
#+END_SRC
** alist
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.jade\\'" . jade-mode))
  (add-to-list 'auto-mode-alist '("\\.as\\'" . actionscript-mode))
  (add-to-list 'auto-mode-alist '("\\.htaccess\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.jar$" . archive-mode))
  (add-to-list 'auto-mode-alist '("\\.log\\'" . syslog-mode))
  (add-to-list 'auto-mode-alist '("logs/.*.txt" . syslog-mode))

  ;; Custom rules for php files
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("model/.*/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("lib/.*/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("process/.*/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("service/.*/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("lang/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("conf/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("ajax/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("controller/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("cron/.*.php" . php-mode))
  (add-to-list 'auto-mode-alist '("index.php" . web-mode))

#+END_SRC
** navigation
#+BEGIN_SRC emacs-lisp
  ;; Ido ------------------------------
  (require 'ido)
  (require 'ido-vertical-mode)
  (require 'ido-occur)

  (ido-mode 1)
  (ido-vertical-mode t)

  ;; C-n/p is more intuitive in vertical layout
  (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)

  ;; disable ido faces to see flx highlights.
  (setq ido-enable-flex-matching t)
  (setq ido-use-faces nil)

  ;; Ivy -------------------------------
  (require 'ivy)

  ;; (setq ivy-re-builders-alist
  ;;       '(
  ;;         ;; (ivy-switch-buffer . ivy--regex-plus)
  ;;         ;; (swiper . ivy--regex-plus)
  ;;         ;; (counsel-imenu . ivy--regex-plus)
  ;;         ;; (t . ivy--regex-fuzzy)
  ;;         ;; (t . ivy--regex-plus)
  ;;         ;; (t . ivy--regex-fuzzy)
  ;;         ;; (projectile-find-file . ivy--regex-fuzzy)
  ;;         ;; (projectile-find-file . ivy--regex-plus)
  ;;         ;; (projectile-find-file . ivy--regex-fuzzy)

  ;;         ;; (t . ivy--regex-fuzzy)

  ;;         ;; (t . ivy--regex-plus)
  ;;         ;; (t. ivy--regex-fuzzy)
  ;;         ;; (projectile-find-file . ivy--regex-plus)
  ;;         ))

  (setq ivy-re-builders-alist
        '((t . ivy--regex-fuzzy)))

  (require 'flx-ido)

  (flx-ido-mode 1)
  (ivy-mode)

  ;; (setq ivy-height 12)
  (setq ivy-height 14)

  ;; full file names - useful when multiple files have same names
  (setq ivy-virtual-abbreviate 'full)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-use-selectable-prompt t)
  (setq projectile-completion-system 'ivy)


  ;; Helm ---------------------------------
  (require 'helm-ag)
  (require 'helm-config)
  (require 'helm-swoop)

  (defun helm-mouse-1-exit-minibuffer (click)
    (interactive "e")
    (mouse-set-point click)
    (helm-mark-current-line)
    (helm-exit-minibuffer))

  ;; https://tuhdo.github.io/helm-intro.html
  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  ;; (helm-autoresize-mode nil)
  (helm-autoresize-mode t)

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t
        helm-ag-insert-at-point 'sexp

        helm-autoresize-min-height 20
        ;; helm-autoresize-max-height 35
        helm-autoresize-max-height 40
        helm-display-buffer-default-height 10
        helm-allow-mouse t

        ;; If this value is t, split window inside the current window
        ;; (setq helm-swoop-split-with-multiple-windows t)

        ;; helm-locate-fuzzy-match t

        ;; Truncate lines
        helm-truncate-lines 1
        helm-follow-mode-persistent t
        helm-ag-insert-at-point nil

        ;; helm-M-x-fuzzy-match t
        ;; helm-recentf-fuzzy-match t
        ;; helm-buffers-fuzzy-matching t
        ;; helm-locate-fuzzy-match t
        ;; helm-imenu-fuzzy-match t
        ;; helm-mode-fuzzy-match t
        )

  (define-key helm-map [mouse-1] 'helm-mouse-1-exit-minibuffer)

  ;; Helm-flx
  (require 'helm-flx)
  (helm-flx-mode)

#+END_SRC
** structural_editing
#+BEGIN_SRC emacs-lisp
;; Swiper ----------------------------
(defun bjm-swiper-recenter (&rest args)
  "Recenter display after swiper"
  (recenter))

;; Paredit ----------------------------
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'css-mode-hook 'paredit-mode)
(add-hook 'clojure-mode-hook 'paredit-mode)

;; (add-hook 'eshell-mode-hook 'smartparens-mode)
(add-hook 'cider-repl-mode-hook 'paredit-mode)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

(define-key paredit-mode-map (kbd "C-h") 'paredit-backward-delete)

(define-key prog-mode-map (kbd "M-(") 'paredit-wrap-round)
(define-key php-mode-map (kbd "M-(") 'paredit-wrap-round)

(define-key prog-mode-map (kbd "M-{") 'paredit-wrap-curly)
(define-key php-mode-map (kbd "M-{") 'paredit-wrap-curly)
(define-key nxml-mode-map (kbd "M-{") 'paredit-wrap-curly)

(define-key prog-mode-map (kbd "M-[") 'paredit-wrap-angled)
(define-key php-mode-map (kbd "M-[") 'paredit-wrap-angled)
(define-key nxml-mode-map (kbd "M-[") 'paredit-wrap-angled)

(define-key prog-mode-map (kbd "<C-left>")'paredit-forward-barf-sexp)
(define-key php-mode-map (kbd "<C-left>")'paredit-forward-barf-sexp)
(define-key nxml-mode-map (kbd "<C-left>")'paredit-forward-barf-sexp)

(define-key prog-mode-map (kbd "<C-right>")'paredit-forward-slurp-sexp)
(define-key php-mode-map (kbd "<C-right>")'paredit-forward-slurp-sexp)
(define-key nxml-mode-map (kbd "<C-right>")'paredit-forward-slurp-sexp)

(defun paredit-space-for-delimiter-p (endp delimiter)
  (and (not (if endp (eobp) (bobp)))
       (memq (char-syntax (if endp (char-after) (char-before)))
             (list ?\"  ;; REMOVED ?w ?_
                   (let ((matching (matching-paren delimiter)))
                     (and matching (char-syntax matching)))))))



;; Autopair ---------------------------
(require 'autopair)

(add-hook 'js2-mode-hook #'autopair-mode)
(add-hook 'js-mode-hook #'autopair-mode)
(add-hook 'web-mode-hook #'autopair-mode)
(add-hook 'php-mode-hook #'autopair-mode)
(add-hook 'css-mode-hook #'autopair-mode)
(add-hook 'scss-mode-hook #'autopair-mode)
(add-hook 'org-mode #'autopair-mode)
;; (add-hook 'clojure-mode-hook #'autopair-mode) ;; No need
(add-hook 'clojure-mode-hook #'autopair-mode) ;; Needed: for newline-and-indent

;; Smartparens ---------------------------
(require 'smartparens-config)
(require 'smartparens-html)

;; (add-hook 'js2-mode-hook #'smartparens-mode)
;; (add-hook 'js-mode-hook #'smartparens-mode)
;; (add-hook 'web-mode-hook #'smartparens-mode)
;; (add-hook 'php-mode-hook #'smartparens-mode)
;; (add-hook 'css-mode-hook #'smartparens-mode)
;; (add-hook 'scss-mode-hook #'smartparens-mode)
;; (add-hook 'org-mode #'smartparens-mode)

(define-key prog-mode-map (kbd "C-M-f") 'sp-forward-sexp)
(define-key php-mode-map (kbd "C-M-f") 'sp-forward-sexp)
(define-key nxml-mode-map (kbd "C-M-f") 'sp-forward-sexp)
;; (define-key web-mode-map (kbd "C-M-f") 'sp-forward-sexp)

(define-key prog-mode-map (kbd "C-M-b") 'sp-backward-sexp)
(define-key php-mode-map (kbd "C-M-b") 'sp-backward-sexp)
(define-key nxml-mode-map (kbd "C-M-b") 'sp-backward-sexp)
;; (define-key web-mode-map (kbd "C-M-b") 'sp-backward-sexp)

(define-key prog-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key php-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key nxml-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key web-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)

(define-key prog-mode-map (kbd "C-M-d") 'sp-down-sexp)
(define-key php-mode-map (kbd "C-M-d") 'sp-down-sexp)
(define-key nxml-mode-map (kbd "C-M-d") 'sp-down-sexp)
(define-key web-mode-map (kbd "C-M-d") 'sp-down-sexp)

(define-key prog-mode-map (kbd "C-M-p") 'sp-backward-down-sexp)
(define-key php-mode-map (kbd "C-M-p") 'sp-backward-down-sexp)
(define-key nxml-mode-map (kbd "C-M-p") 'sp-backward-down-sexp)
(define-key web-mode-map (kbd "C-M-p") 'sp-backward-down-sexp)

(define-key prog-mode-map (kbd "C-M-n") 'sp-up-sexp)
(define-key php-mode-map (kbd "C-M-n") 'sp-up-sexp)
(define-key nxml-mode-map (kbd "C-M-n") 'sp-up-sexp)
(define-key web-mode-map (kbd "C-M-n") 'sp-up-sexp) ;; OK in web mode > js

(define-key prog-mode-map (kbd "C-k") 'sp-kill-hybrid-sexp)
(define-key php-mode-map (kbd "C-k") 'sp-kill-hybrid-sexp)
(define-key nxml-mode-map (kbd "C-k") 'sp-kill-hybrid-sexp)
;; (define-key web-mode-map (kbd "C-k") 'sp-kill-hybrid-sexp)

(define-key prog-mode-map (kbd "C-M-k") 'sp-kill-sexp)
(define-key php-mode-map (kbd "C-M-k") 'sp-kill-sexp)
(define-key nxml-mode-map (kbd "C-M-k") 'sp-kill-sexp)
(define-key web-mode-map (kbd "C-M-k") 'sp-kill-sexp)

(define-key prog-mode-map (kbd "C-M-h") 'sp-backward-kill-sexp)
(define-key php-mode-map (kbd "C-M-h") 'sp-backward-kill-sexp)
(define-key nxml-mode-map (kbd "C-M-h") 'sp-backward-kill-sexp)
(define-key web-mode-map (kbd "C-M-h") 'sp-backward-kill-sexp) ;; OK in web mode > js
(define-key emacs-lisp-mode-map (kbd "C-M-h") 'sp-backward-kill-sexp)
(define-key clojure-mode-map (kbd "C-M-h") 'sp-backward-kill-sexp)

(define-key php-mode-map (kbd "C-M-a") 'beginning-of-defun)
(define-key nxml-mode-map (kbd "C-M-a") 'beginning-of-defun)

(define-key php-mode-map (kbd "C-M-e") 'end-of-defun)
(define-key nxml-mode-map (kbd "C-M-e") 'end-of-defun)

(define-key emacs-lisp-mode-map (kbd "<backspace>") 'delete-backward-char)
(define-key clojure-mode-map (kbd "<backspace>") 'delete-backward-char)

#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
(require 'dired)
(require 'cl)

(setq auto-revert-interval 1)
(setq dired-dwim-target nil)

(defun wlh/dired-hook ()
  (dired-hide-details-mode +1)
  (diff-hl-dired-mode))

(add-hook 'dired-mode-hook 'wlh/dired-hook)
(add-hook 'dired-mode-hook 'auto-revert-mode)

#+END_SRC
** project
#+BEGIN_SRC emacs-lisp
;; Projectile
(require 'projectile)
(projectile-global-mode)
(projectile-mode +1)

(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(setq projectile-mode-line nil)
(setq projectile-enable-caching t)
(setq projectile-require-project-root nil); Using Projectile everywhere
(add-to-list 'projectile-globally-ignored-directories "node_modules") ; Some ignore rules


(require 'workgroups)
(workgroups-mode)
(setq wg-prefix-key (kbd "C-c w"))

#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
;; https://github.com/takaxp/org-mode/blob/master/lisp/org-mouse.el
(require 'org)
(require 'org-mouse)
(require 'ox-latex)
(require 'org)
(require 'toc-org)
(require 'org-bullets)
(require 'ob)

;; https://emacs.stackexchange.com/a/20762
(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)
(setq org-src-tab-acts-natively t)

(setq org-agenda-files (quote ("~/org" "~/.emacs.d/emacs_todo.org")))
(setq org-default-notes-file (concat org-directory "/main.org"))
(setq org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1)))

(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

;; https://www.reddit.com/r/emacs/comments/43vfl1/enable_wordwrap_in_orgmode/czmaj7n/
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; (auto-fill-mode 1)
(setq comment-auto-fill-only-comments t)
(add-hook 'org-mode-hook 'toc-org-enable)
(setq org-src-window-setup 'current-window)

(add-hook 'org-mode-hook
          (lambda () 
            (interactive)
            (org-bullets-mode 1)))

;; Add org babel langages support
(require 'ob)
(require 'ob-clojure)
(require 'ob-php)

(setq org-babel-clojure-backend 'cider)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (ditaa . t)
   (plantuml . t)
   (dot . t)
   (php . t)
   (ruby . t)
   (clojure . t)
   (js . t)
   (C . t)))

;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((sh         . t)
;;    (js         . t)
;;    (emacs-lisp . t)
;;    (perl       . t)
;;    ;; (html       . t)
;;    (scala      . t)
;;    (sass       . t)
;;    (clojure    . t)
;;    (php        . t)
;;    (python     . t)
;;    (ruby       . t)
;;    (dot        . t)
;;    (css        . t)
;;    (plantuml   . t)))

;; ;; org syntax highlight code
;; (setq org-confirm-babel-evaluate nil
;;       org-src-fontify-natively t
;;       org-src-tab-acts-natively t)

;; org protocol
;; http://orgmode.org/worg/org-contrib/org-protocol.html
;; (add-to-list 'load-path "~/path/to/org/protocol/")
(require 'org-protocol)

;; http://orgmode.org/manual/Breaking-down-tasks.html#Breaking-down-tasks
(defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

;; http://orgmode.org/manual/Multiple-sets-in-one-file.html#Multiple-sets-in-one-file
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
        (sequence "WAIT" "IN PROGRESS" "CANCELED" "|")))

;; http://aaronbedra.com/emacs.d/
;; (provide 'ob-clojure)

#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-initialize)

(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
(require 'highlight-defined)
(highlight-defined-mode)

;; Key chords ------------------------------------
;; From http://emacsrocks.com/e07.html
(key-chord-mode 1)

;; Max time delay between two key presses to be considered a key
(setq key-chord-two-keys-delay 0.1) ; default 0.1
(setq key-chord-one-key-delay 0.2) ; default 0.2

;; Multicursor ---------------------------------
(setq mc/always-run-for-all nil)

;; Multiple-curspr with mouse
;; http://pragmaticemacs.com/emacs/add-multiple-cursors-with-mouse-clicks/
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-<mouse-1>" . mc/add-cursor-on-click)))

;; Witch-key -----------------------
(which-key-mode)

;; http://pragmaticemacs.com/
(use-package pdf-tools
  :pin manual ;; manually update
  :config
  ;; initialise
  (pdf-tools-install)
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

;; Don't prompt me when i want to kill a shell
;; Source : http://stackoverflow.com/a/2706660
(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
  "Prevent annoying \"Active processes exist\" query when you quit Emacs."
  (cl-letf (((symbol-function #'process-list) (lambda ())))
    ad-do-it))

;; rainbow-mode (css color)
;; (require 'rainbow-mode)
;; Disable rainbow-mode by default
(require 'rainbow-mode)

;; sy
(require 'syslog-mode)

;; (add-hook 'syslog-mode-hook
;;           (lambda ()
;;             ))

;; https://emacs.stackexchange.com/a/13010
(defun etc-log-tail-handler ()
  (syslog-mode)
  (end-of-buffer)
  (toggle-truncate-lines 1)
  (define-key syslog-mode-map (kbd "◊") 'scroll-down)
  (define-key syslog-mode-map (kbd "C-v") 'scroll-up)
  ;; (make-variable-buffer-local 'auto-revert-interval)
  (setq auto-revert-interval 1)
  (auto-revert-set-timer)
  (make-variable-buffer-local 'auto-revert-verbose)
  (setq auto-revert-verbose nil)
  ;; (read-only-mode t)
  (font-lock-mode 0)
  
  ;; (when (fboundp 'show-smartparens-mode)
  ;;   (show-smartparens-mode 0))
  (company-mode 0)
  (undo-tree-mode 0)
  (editorconfig-mode 0)
  (yas-global-mode 0)
  (yas-minor-mode 0)
  (company-mode 0)
  (ivy-mode 0)
  (highlight-symbol-mode 0))

;; automagically tail log files
(add-to-list 'auto-mode-alist '("\\`/log/" . auto-revert-tail-mode))
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-tail-mode))
(add-to-list 'auto-mode-alist '("/var/log.*\\'" . auto-revert-tail-mode))
(add-hook 'auto-revert-tail-mode-hook 'etc-log-tail-handler)

;; recent files
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)

(recentf-mode 1)
(setq-default recent-save-file "~/.emacs.d/tmp/recentf")

(require 'yaml-mode)

;; rainbow-delimiters
(require 'rainbow-delimiters)
;;(add-hook 'prog-mode-map #'rainbow-delimiters-mode)
(add-hook 'eshell-mode-hook #'rainbow-delimiters-mode)
(add-hook 'eww-mode #'rainbow-delimiters-mode)
(add-hook 'eww-mode #'rainbow-mode)

;; Eshell conf
(defun wlh/eshell-hook ()
  (interactive)
  (company-mode nil))

(add-hook 'eshell-mode-hook 'wlh/eshell-hook)

(require 'diff-mode)
(require 'smerge-mode)

(defun occur-dwim ()
  "Call `occur' with a sane default, chosen as the thing under point or selected region"
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))

;; Focus on *Occur* window right away.
(add-hook 'occur-hook (lambda () (other-window 1)))

(defun reattach-occur ()
  (if (get-buffer "*Occur*")
      (switch-to-buffer-other-window "*Occur*")
    (hydra-occur-dwim/body) ))

(defun my/jump-to-point-and-show ()
  "Switch to a cloned buffer's base buffer and move point to the cursor position in the clone."
  (interactive)
  (let ((buf (buffer-base-buffer)))
    (unless buf
      (error "You need to be in a cloned buffer!"))
    (let ((pos (point))
          (win (car (get-buffer-window-list buf))))
      (if win
          (select-window win)
        (other-window 1)
        (switch-to-buffer buf))
      (goto-char pos)
      (when (invisible-p (point))
        (show-branches)))))

;; Do not show ^M in files containing mixed UNIX and DOS line endings.
;; https://stackoverflow.com/a/750933
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

(remove-dos-eol)
(add-hook 'text-mode-hook 'remove-dos-eol)
(add-hook 'prog-mode-hook 'remove-dos-eol)
(add-hook 'diff-mode-hook 'remove-dos-eol)
(add-hook 'web-mode-hook 'remove-dos-eol) 
(add-hook 'fundamental-mode 'remove-dos-eol)

;; Enlarge frame
(defun wlh/frame-large ()
  (interactive)
  (set-frame-width (selected-frame) 220)
  (set-frame-height (selected-frame) 55)
  (set-frame-position (selected-frame) 500 400))

;; Center frame
;; x-display-width / 4 because of retinata double ratio (should be / 2)
;; Only works in emacs-osx build
(defun wlh/frame-center ()
  (interactive)
  (set-frame-position (selected-frame)
                      (- (/ (x-display-pixel-width) 4) (/ (frame-pixel-width) 2))
                      (- (/ (x-display-pixel-width) 4) (frame-pixel-height))))

;; crux
(require 'crux)

(defun prelude-todo-ov-evaporate (_ov _after _beg _end &optional _length)
  (let ((inhibit-modification-hooks t))
    (if _after (ov-reset _ov))))

(defun prelude-annotate-todo ()
  "Put fringe marker on TODO: lines in the curent buffer."
  (interactive)
  (ov-set (format "[[:space:]]*%s+[[:space:]]*TODO:" comment-start)
          'before-string
          (propertize (format "A")
                      'display '(left-fringe right-triangle))
          'modification-hooks '(prelude-todo-ov-evaporate)))

;; Lang hunspel
(setq ispell-program-name (executable-find "hunspell"))
(setq ispell-dictionary "fr")

(defun langtool-autoshow-detail-popup (overlays)
  (when (require 'popup nil t)
    ;; Do not interrupt current popup
    (unless (or popup-instances
                ;; suppress popup after type `C-g` .
                (memq last-command '(keyboard-quit)))
      (let ((msg (langtool-details-error-message overlays)))
        (popup-tip msg)))))

(setq langtool-autoshow-message-function
      'langtool-autoshow-detail-popup)

;; (require 'string-inflection)
(require 'easy-kill)
(global-set-key [remap kill-ring-save] 'easy-kill)
;; (global-set-key [remap mark-sexp] 'easy-mark)

(use-package dired-ranger
  :ensure t
  :bind (:map dired-mode-map
              ("W" . dired-ranger-copy)
              ("X" . dired-ranger-move)
              ("Y" . dired-ranger-paste)))

;; http://pragmaticemacs.com/emacs/insert-todays-date/
(defun insert-todays-date (arg)
  (interactive "P")
  (insert (if arg
              (format-time-string "%d-%m-%Y")
            (format-time-string "%Y-%m-%d"))))

;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))

(defun wlh/dired-rename (new-name)
  "Rename from dired"
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))

;; undotree
(global-undo-tree-mode 1)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist
      (quote (("" . "~/.emacs.d/tmp/undo_hist"))))

(add-hook 'lisp-mode-hook (lambda ()
                            (define-key slime-macroexpansion-minor-mode-map (kbd "M-z") 'slime-macroexpand-undo)))

;; (add-hook 'c-mode-hook 'hs-minor-mode)

;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  ;; rename after killing uniquified
  (setq uniquify-after-kill-buffer-p t)
  ;; don't muck with special buffers
  (setq uniquify-ignore-buffers-re "^\\*"))


(use-package move-text
  :ensure t
  :bind
  (([(meta control up)] . move-text-up)
   ([(meta control down)] . move-text-down)))
   
(require 'dumb-jump)

;; http://emacsredux.com/blog/2013/03/29/automatic-electric-indentation/
(electric-indent-mode +1)

;; https://stackoverflow.com/a/22109370
(defun new-line-dwim ()
  (interactive)
  (let ((break-open-pair (or (and (looking-back "{") (looking-at "}"))
                             ;; (and (looking-back ">") (looking-at "<"))
                             (and (looking-back "(") (looking-at ")"))
                             (and (looking-back "\\[") (looking-at "\\]")))))
    (newline)
    (when break-open-pair
      (save-excursion
        (newline)
        (indent-for-tab-command)))
    (indent-for-tab-command)))

;; http://ergoemacs.org/emacs/emacs_abbrev_mode_tutorial.html
(defun xah-abbrev-h-f ()
  "Abbrev hook function, used for `define-abbrev'.
 Our use is to prevent inserting the char that triggered expansion. Experimental.
 the “ahf” stand for abbrev hook function.
Version 2016-10-24"
  t)

(put 'xah-abbrev-h-f 'no-self-insert t)

;; Prevent space after abbrev expand
(define-abbrev-table 'global-abbrev-table 
  '(
    ("fu" "function" xah-abbrev-h-f)
    ("arg" "arguments" xah-abbrev-h-f)))

;; From
;; https://github.com/cichli/dotfiles/blob/master/.emacs.d/init.el#L172
;; again. Nice feature!
(use-package browse-kill-ring
  :config
  (browse-kill-ring-default-keybindings)
  :bind
  (("C-c k" . browse-kill-ring)))

(require 'edit-server)
(edit-server-start)

;; Pandoc
(require 'pandoc-mode)

;; From prelude
;; proced-mode doesn't work on OS X so we use vkill instead
(autoload 'vkill "vkill" nil t)
(global-set-key (kbd "C-x p") 'vkill)

;; From prelude
;; whitespace-mode config
(setq whitespace-line-column 80) ;; limit line length
(setq whitespace-style '(face tabs empty trailing lines-tail)) ; From Prelude

;; saner regex syntax
;; From Prelude
(require 're-builder)
(setq reb-re-syntax 'string)

;; From prelude
;; Colorize output of Compilation Mode, see
;; http://stackoverflow.com/a/3072831/355252
(require 'ansi-color)
(add-hook 'compilation-filter-hook #'prelude-colorize-compilation-buffer)

;; google-translate conf
(setq google-translate-default-source-language "fr")
(setq google-translate-default-target-language "en")

;; disable window-system in terminal mode
(unless window-system
  (menu-bar-mode -1))

(require 'smart-comment)
(global-set-key (kbd "M-;") 'smart-comment)

;; (require 'visual-regexp)
;; (global-set-key (kbd "M-%") 'vr/query-replace)

;; http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
(define-key ctl-x-map "\C-i"
  #'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev
            (if p local-abbrev-table global-abbrev-table)
            bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))


; ace-link
(require 'ace-link)
(ace-link-setup-default)

;; (require 'visual-regexp)

;; http://endlessparentheses.com/eval-result-overlays-in-emacs-lisp.html
;; Cette partie doit est presente une fois cider charge
(autoload 'cider--make-result-overlay "cider-overlays")

(defun endless/eval-overlay (value point)
  (cider--make-result-overlay (format "%S" value)
    :where point
    :duration 'command)
  ;; Preserve the return value.
  value)

(advice-add 'eval-region :around
            (lambda (f beg end &rest r)
              (endless/eval-overlay
               (apply f beg end r)
               end)))

(advice-add 'eval-last-sexp :filter-return
            (lambda (r)
              (endless/eval-overlay r (point))))

(advice-add 'eval-defun :filter-return
            (lambda (r)
              (endless/eval-overlay
               r
               (save-excursion
                 (end-of-defun)
                 (point)))))

;; markdown-mode
(require 'markdown-mode)
(setq markdown-toggle-fontify-code-blocks-natively t)

;; term
(add-hook 'term-exec-hook 'set-no-process-query-on-exit)
;; highlight-symbol ---------------------------
(require 'highlight-symbol)

(setq highlight-symbol-idle-delay .3)

(add-hook 'prog-mode-hook
          (highlight-symbol-nav-mode))

(add-hook 'typscript-mode-hook
          (highlight-symbol-nav-mode))

(add-hook 'emacs-lisp-mode-hook
          (highlight-symbol-nav-mode))

;; Crypto
(require 'epa)
(epa-file-enable)

;; Eshell
(defun wlh/eshell-mode-hook ()
  (company-mode 0))
(add-hook 'eshell-mode-hook 'wlh/eshell-mode-hook)


;; hl-line-mode
(require 'hl-line)

;; editorconfig
(require 'editorconfig)
(add-hook 'prog-mode-hook 'editorconfig-mode)

(require 'shell-pop)
(setq shell-pop-shell-type `ansi-term)

#+END_SRC
** ui
#+BEGIN_SRC emacs-lisp
(require 'diminish)

(setq wg-flag-modified t) ; Display modified flags as well
(setq wg-mode-line-decor-left-brace "["
      wg-mode-line-decor-right-brace "]"  ; how to surround it
      wg-mode-line-decor-divider ":")

(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "paredit" '(diminish 'paredit-mode))
(eval-after-load "tagedit" '(diminish 'tagedit-mode))
(eval-after-load "elisp-slime-nav" '(diminish 'elisp-slime-nav-mode))
(eval-after-load "skewer-mode" '(diminish 'skewer-mode))
(eval-after-load "skewer-css" '(diminish 'skewer-css-mode))
(eval-after-load "skewer-html" '(diminish 'skewer-html-mode))
(eval-after-load "editorconfig" '(diminish 'editorconfig-mode))
(eval-after-load "company" '(diminish 'company-mode))
(eval-after-load "rainbow-mode" '(diminish 'rainbow-mode))
(eval-after-load "ivy" '(diminish 'ivy-mode))
(eval-after-load "which-key" '(diminish 'which-key-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
(eval-after-load "snipe-mode" '(diminish 'snipe-mode))
(eval-after-load "emmet-mode" '(diminish 'emmet-mode))
(eval-after-load "highlight-symbol" '(diminish 'highlight-symbol-mode))
(eval-after-load "flycheck" '(diminish 'flycheck-mode))
(eval-after-load "evil-snipe" '(diminish 'evil-snipe-mode))

#+END_SRC
** completion
#+BEGIN_SRC emacs-lisp
(require 'company)
(require 'company-flx)

(defun wlh/company-hook ()
  (interactive)

  (company-mode)
  (company-quickhelp-mode 1)
  (setq company-show-numbers t)
  (setq company-echo-delay 0)
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 0.2)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 16)
  (setq company-require-match nil)
  (setq company-quickhelp-mode 1)
  (setq company-quickhelp-delay 1)
  (setq company-quickhelp-max-lines nil)
  (setq company-transformers '(company-sort-by-occurrence
                               company-sort-by-backend-importance))
  (setq company-selection-wrap-around t)
  
  (company-flx-mode)

  (define-key company-mode-map (kbd "TAB") 'company-indent-or-complete-common)
  (define-key company-active-map (kbd "C-h") 'paredit-backward-delete)
  (define-key company-active-map (kbd "C-w") 'paredit-backward-kill-word)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
  (define-key company-active-map (kbd "C-c h") 'company-quickhelp--show))

(add-hook 'emacs-lisp-mode-hook 'wlh/company-hook)

#+END_SRC
** yas
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)

(setq yas-snippet-dirs '("~/.emacs.d/resources/snippets/willahh/"))
(add-to-list 'yas-snippet-dirs "~/.emacs.d/resources/snippets/yasnippet")
(add-to-list 'yas-snippet-dirs "~/.emacs.d/resources/snippets/common-lisp-snippets/snippets")

(setq yas/indent-line nil)
(setq yas-indent-line 'auto)

(add-hook 'prog-mode-hook #'yas-minor-mode)
(add-hook 'web-mode-hook #'yas-minor-mode)
(add-hook 'org-mode-hook #'yas-minor-mode)

(yas-reload-all)
#+END_SRC
** vc
#+BEGIN_SRC emacs-lisp
(require 'git-gutter)
(require 'diff-hl)
(require 'vc-svn)

(setq diff-hl-draw-borders nil)

;; Show refined hunks
(set-default 'magit-diff-refine-hunk t)

;; Show character-level diff
(setq-default ediff-forward-word-function 'forward-char)

;; Dont hide elements in ediff
(add-hook 'ediff-prepare-buffer-hook #'show-all)

;; Some defun helpers
(defun wlh/vc-dir ()
  (interactive)
  (vc-dir (projectile-project-root)))

(defun wlh/vc-version-diff-base-head ()
  ;; Quick call vc-version-diff to compare the base and head version
  (interactive)
  (vc-version-diff (vc-deduce-fileset t) "base" "head"))

(defun wlh/vc-version-ediff-base-head ()
  ;; Quick call vc-version-ediff to compare the base and head version
  (interactive)
  (setq my-ediff-last-windows (current-window-configuration))
  (vc-version-ediff (cadr (vc-deduce-fileset t)) "base" "head"))

(defun wlh/vc-ediff ()
  (interactive)
  (setq my-ediff-last-windows (current-window-configuration))
  (vc-ediff nil))

;; Ediff from dired
;; https://oremacs.com/2017/03/18/dired-ediff/
(defun ora-ediff-files ()
  (interactive)
  (let ((files (dired-get-marked-files))
        (wnd (current-window-configuration)))
    (if (<= (length files) 2)
        (let ((file1 (car files))
              (file2 (if (cdr files)
                         (cadr files)
                       (read-file-name
                        "file: "
                        (dired-dwim-target-directory)))))
          (if (file-newer-than-file-p file1 file2)
              (ediff-files file2 file1)
            (ediff-files file1 file2))
          (add-hook 'ediff-after-quit-hook-internal
                    (lambda ()
                      (setq ediff-after-quit-hook-internal nil)
                      (set-window-configuration wnd))))
      (error "no more than 2 files should be marked")))
  (define-key dired-mode-map "e" 'ora-ediff-files)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally))

;; Don't ask if i want to quit this ediff session, yes i always want if i type q
;; https://emacs.stackexchange.com/a/24602
(defun disable-y-or-n-p (orig-fun &rest args)
  (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
    (apply orig-fun args)))

(advice-add 'ediff-quit :around #'disable-y-or-n-p)

;; Ediff vertical splitted by default
(custom-set-variables
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(ediff-diff-options "-w")
 '(ediff-split-window-function 'split-window-horizontally))

;; Diff mode hook
(defun wlh/diff-mode-hook ()
  (interactive)
  (toggle-truncate-lines)
  (outline-minor-mode)
  (setq diff-hl-draw-borders nil)
  (diff-hl-mode t))

(defun wlh/diff-hl-mode-hook ()
  (diff-hl-mode t))

(add-hook 'prog-mode-hook 'wlh/diff-hl-mode-hook)
(add-hook 'org-mode-hook 'wlh/diff-hl-mode-hook)
(add-hook 'diff-mode-hook 'wlh/diff-mode-hook)
(add-hook 'magit-mode-hook 'wlh/diff-mode-hook)
(add-hook 'magit-diff-mode-hook 'wlh/diff-mode-hook)

;; vc-dir custom key bindings
(define-key vc-dir-mode-map (kbd "e") 'wlh/vc-ediff)
(define-key vc-dir-mode-map (kbd "E") 'wlh/vc-version-ediff-base-head)
(define-key vc-dir-mode-map (kbd "d") 'vc-diff)
(define-key vc-dir-mode-map (kbd "D") 'wlh/vc-version-diff-base-head)
(define-key vc-dir-mode-map (kbd "k") 'vc-revert) ; (k is like k (for discard changes) in magit)
(define-key vc-dir-mode-map (kbd "g") 'vc-dir-refresh)

;; Ediff window management
(defvar my-ediff-last-windows nil)

(defun my-restore-pre-ediff-winconfig ()
  (set-window-configuration my-ediff-last-windows))

(add-hook 'ediff-quit-hook #'my-restore-pre-ediff-winconfig)

#+END_SRC
** search
#+BEGIN_SRC emacs-lisp
;; Isearch ---------------------
(defun isearch-occur ()
  "Invoke `occur' from within isearch."
  (interactive)
  (let ((case-fold-search isearch-case-fold-search))
    (occur (if isearch-regexp isearch-string (regexp-quote isearch-string)))))

(defun isearch-highlight-phrase ()
  "Invoke `highligh-phrase' from within isearch.
  From: https://www.emacswiki.org/emacs/HighlightFromIsearch"
  (interactive)
  (let ((case-fold-search isearch-case-fold-search))
    (highlight-phrase (if isearch-regexp
                          isearch-string
                        (regexp-quote isearch-string)))))

(setq-default isearch-allow-scroll t
              lazy-highlight-cleanup t
              lazy-highlight-initial-delay 0
              isearch-allow-scroll t
              lazy-highlight-cleanup t
              lazy-highlight-initial-delay 0)

(require 'ag)

(defun wlh/ag-mode-hook ()
  (make-variable-buffer-local 'truncate-lines)
  (setq truncate-lines t))

(setq ag-highlight-search t)
(setq ag-reuse-buffers nil)
(setq ag-reuse-window nil)

(add-hook 'ag-mode-hook 'wlh/ag-mode-hook)
(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)

#+END_SRC
** key_binding
#+BEGIN_SRC emacs-lisp
(defvar wlh/leader-key (concat "M-m" " "))
(require 'cider)
(global-unset-key (kbd "M-m"))

;; --------------- Main Emacs keybinding changes
(global-set-key (kbd "M-x") 'whole-line-or-region-kill-region)
(global-set-key (kbd "C-x RET") 'dired-jump)
(global-set-key (kbd "M-a") 'mark-whole-buffer) ; Was backward-sentence
;; (define-key php-mode-map (kbd "M-a") 'mark-whole-buffer)


;; Copy
;; (global-set-key (kbd "M-c") #'kill-ring-save-keep-selection)
(global-set-key (kbd "M-c") 'kill-ring-save)

;; Yank
(global-set-key (kbd "M-v") 'yank)
(define-key mc/keymap (kbd "M-v") 'yank)
(define-key helm-map (kbd "M-v") 'yank)
(define-key ivy-minibuffer-map (kbd "M-v") 'yank)
(define-key ivy-minibuffer-map (kbd "C-i") 'ivy-alt-done)
(global-set-key [(meta v)] 'yank)

;; Yank pop
(global-set-key [(meta shift v)] 'yank-pop)

;; End / Home
(global-set-key (kbd "<end>") 'end-of-buffer)
(global-set-key (kbd "<home>") 'beginning-of-buffer)

;; --------------- ALT key binding
;; Azerty keyboard
(global-set-key (kbd "≈") 'counsel-M-x) ; Alt + x
(global-set-key (kbd "") 'toggle-php-flavor-mode) ; Alt + 1
(global-set-key (kbd "∑") 'helm-ag) ; Alt + shift + s
(global-set-key (kbd "†") 'toggle-truncate-lines) ; Alt + t
(global-set-key (kbd "ﬁ") 'goto-line) ; Alt + g
(global-set-key (kbd "Â") 'toggle-php-flavor-mode) ; Alt+z
(global-set-key (kbd "Í") 'decrement-number-at-point)
(global-set-key (kbd "Ë") 'increment-number-at-point)

;; Multi cursor stuf
(global-set-key (kbd "ı") 'mc/mark-next-lines) ; ALT+SHIFT+n
(global-set-key (kbd "∏") 'mc/mark-previous-lines) ; ALT+SHIFT+p

;; Drag line"
(global-set-key (kbd "π") 'drag-stuff-up) ; ALT+p
(define-key org-mode-map (kbd "π") 'org-metaup) ; ALT+p
(global-set-key (kbd "È") 'drag-stuff-up) ; ALT+k
(define-key org-mode-map (kbd "È") 'org-metaup) ; ALT+k
(global-set-key (kbd "<M-up>") 'drag-stuff-up)

;; Bottom
(global-set-key (kbd "ñ") 'drag-stuff-down) ; ALT+n
(define-key org-mode-map (kbd "ñ") 'org-down) ; ALT+n
(define-key org-mode-map (kbd "Ï") 'org-metadown) ; ALT+j
(global-set-key (kbd "Ï") 'drag-stuff-down) ; ALT+j
(global-set-key (kbd "<M-down>") 'drag-stuff-down)

;; Scroll
(global-set-key (kbd "◊") 'scroll-down-half) ; ALT + v


;; ---------------- key-chord
(key-chord-define-global "xc" 'er/expand-region)


;; --------------- Leader key bindings
;; Search
(global-set-key (kbd (concat wlh/leader-key "s s")) 'projectile-ag)
(global-set-key (kbd (concat wlh/leader-key "s a")) 'ag)
(global-set-key (kbd (concat wlh/leader-key "M-s")) 'helm-ag)

;; Google
(global-set-key (kbd (concat wlh/leader-key "g s")) 'helm-google-suggest)
(global-set-key (kbd (concat wlh/leader-key "g t")) 'google-translate-at-point)

;; User keybinding - Line
(global-set-key (kbd (concat wlh/leader-key "t")) 'toggle-truncate-lines)

;; Shell / Term
(global-set-key (kbd (concat wlh/leader-key "e")) 'eshell)
(global-set-key (kbd (concat wlh/leader-key "a")) 'ansi-term)

;; Emacs custom commonly used functions
(global-set-key (kbd (concat wlh/leader-key "f n d")) 'find-name-dired)
(global-set-key (kbd (concat wlh/leader-key "w c")) 'whitespace-cleanup)

;; Increment at point
(global-set-key (kbd (concat wlh/leader-key "i")) 'wlh/hydra-increment-at-point/body)
(global-set-key (kbd (concat wlh/leader-key "p")) 'wlh/workspace-search)

;; org
(global-set-key (kbd (concat wlh/leader-key "o")) 'org-iswitchb)
(global-set-key (kbd (concat wlh/leader-key "c")) 'org-capture)

;; Misc
(global-set-key (kbd (concat wlh/leader-key "b u")) 'browse-url)
(global-set-key (kbd (concat wlh/leader-key "m d")) 'wlh/mysql-dump)

;; Join region
(global-set-key (kbd (concat wlh/leader-key "M-J")) 'join-region)
(global-set-key (kbd (concat wlh/leader-key "M-j")) 'join-line)

;; 
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(define-key paredit-mode-map (kbd "M-q") 'fill-paragraph)
(global-set-key (kbd "C-;") "\C-e;") ; (CONTROL + ; -> Append ";" at the end of a line)
(global-set-key (kbd "C-c RET") 'wlh/join-line)
;; (global-set-key (kbd "C-c C-g") 'goto-line)
(global-set-key (kbd "C-c h") 'help)

;; Scroll
(global-set-key (kbd "C-v") 'scroll-up-half)

;; undo-tree
(global-set-key (kbd "M-z") 'undo-tree-undo)
(global-set-key [(meta shift z)] 'undo-tree-redo)

;; Update disable M-s for save, use default C-x C-sq
;; Reactivation because I had a lot of trouble with paredit M-s
(global-set-key (kbd "M-s") 'save-buffer)
(define-key paredit-mode-map (kbd "M-s") 'save-buffer)
 
;; delete-window
(global-set-key (kbd "M-w") 'wlh/delete-window) ;; Delete window or frame
(define-key magit-mode-map (kbd "M-w") 'wlh/delete-window)
(global-set-key (kbd "M-W") 'delete-frame)
(define-key magit-mode-map (kbd "M-W") 'delete-frame)

;; shell-pop
(global-set-key (kbd "C-!") 'shell-pop)
(global-set-key (kbd "C-t") 'transpose-chars)

;; ivy
;; (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
(define-key ivy-minibuffer-map (kbd "C-h") 'delete-backward-char)

;; Kill
;; (global-set-key (kbd "C-w") 'whole-line-or-region-kill-region)
(global-set-key (kbd "C-w") 'backward-kill-word-or-region)
(global-set-key (kbd "C-z") 'whole-line-or-region-kill-region)
(global-set-key [(control meta h)] 'backward-kill-sexp)
(global-set-key (kbd "C-c C-k") 'kill-whole-line) ;; Override default emacs kill sentence but i don't use it
(global-set-key (kbd "C-c C-o") 'ivy-occur)

;; ---------------- Eval
(define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)
(define-key emacs-lisp-mode-map (kbd "C-c C-e") 'rr/eval-and-replace)
(define-key emacs-lisp-mode-map (kbd "C-c C-v") 'eval-buffer)
(global-set-key (kbd "C-c C-v") 'eval-buffer)

;; ---------------- Tab
(global-set-key (kbd "<backtab>") 'untab-region)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action


;; ---------------- Mouse
(global-set-key (kbd "<S-wheel-left>") '(lambda ()
                                          (interactive)
                                          (scroll-right 4)))

(global-set-key (kbd "<S-wheel-right>") '(lambda ()
                                           (interactive)
                                           (scroll-left 4)))

(global-set-key (kbd "<M-down-mouse-1>") 'mc/add-cursor-on-click)
(global-set-key (kbd "<mouse-3>") 'mac-mouse-buffer-menu)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
(global-set-key (kbd "<double-wheel-left>") 'scroll-right)
(global-set-key (kbd "<double-wheel-right>") 'scroll-left)
(define-key global-map (kbd "<S-down-mouse-1>") 'mouse-save-then-kill)
(define-key php-mode-map (kbd "<C-M-mouse-1>") 'dumb-jump-go)


;; Buffer / frames / main
;; Frames
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)

;; ---------------- M-n M-N
;; New buffer
;; (global-set-key (kbd "C-x C-n") 'xah-new- empty-buffer)
;; (define-key org-mode-map (kbd "C-x C-n") 'xah-new-empty-buffer)

(global-set-key (kbd "M-n") 'xah-new-empty-buffer)
(define-key org-mode-map (kbd "M-n") 'xah-new-empty-buffer)
;; (define-key slime-repl-mode-map (kbd "M-n") 'xah-new-empty-buffer)
(define-key diff-mode-map (kbd "M-n") 'xah-new-empty-buffer)
(define-key ibuffer-mode-map (kbd "M-n") 'xah-new-empty-buffer)

;; New frame
(global-set-key (kbd "M-N") 'wlh/create-new-centered-frame)
(define-key highlight-symbol-nav-mode-map (kbd "M-N") 'wlh/create-new-centered-frame)
(define-key ibuffer-mode-map (kbd "M-N") 'wlh/create-new-centered-frame)
(define-key compilation-mode-map (kbd "M-N") 'wlh/create-new-centered-frame)
(define-key magit-mode-map (kbd "M-N") 'wlh/create-new-centered-frame)
(define-key slime-mode-map (kbd "M-N") 'wlh/create-new-centered-frame)

;; Revert buffer
(define-key global-map (kbd "C-x C-r") 'wlh/revert-buffer)
(global-set-key (kbd "C-x C-r") 'wlh/revert-buffer)
(define-key diff-mode-shared-map (kbd "g") 'wlh/revert-buffer)

(global-set-key (kbd "C-x C-k") 'kill-region)

;; ---------------- Dired
(global-set-key (kbd "C-x RET") 'dired-jump)
(define-key php-mode-map [(control x) (control j)] 'dired-jump)
(define-key web-mode-map [(control x) (control j)] 'dired-jump)
(define-key dired-mode-map (kbd "C-x w") 'wdired-change-to-wdired-mode)
(define-key dired-mode-map (kbd "C-i") 'dired-subtree-toggle)
(define-key dired-mode-map (kbd "i") 'dired-subtree-toggle)
(define-key dired-mode-map (kbd "<tab>") 'dired-subtree-toggle)
(define-key dired-mode-map (kbd "C-c C-p") 'dired-subtree-up)
(define-key dired-mode-map (kbd "C-c C-n") 'dired-subtree-down)
(define-key dired-mode-map (kbd "b") 'crux-open-with)
(define-key dired-mode-map (kbd "B") 'wlh/vscode-dired-at-point)

;; ---------------- Multi cursor binding
;; (global-set-key (kbd "M-L") 'mc/mark-all-words-like-this) ; VS Code key binding
;; (global-set-key (kbd "M-g") 'mc/mark-next-like-this-word) ; Almost like sublime M-d. Was go to line
(global-set-key (kbd "Δ") 'mc/mark-next-like-this-word) ; Almost like sublime M-d. Was go to line
(global-set-key (kbd "M-G") 'mc/mark-previous-like-this-word)
;; (define-key paredit-mode-map (kbd "M-g") 'mc/mark-next-like-this-word) ; Was go to line

;; ---------------- Backward delete char C-h
(global-set-key (kbd "C-h") 'backward-delete-char)
(define-key prog-mode-map (kbd "C-h") 'backward-delete-char)
(define-key php-mode-map (kbd "C-h") 'backward-delete-char)
(define-key nxml-mode-map (kbd "C-h") 'backward-delete-char)
(define-key lisp-mode-map (kbd "C-h") 'paredit-backward-delete)
(define-key emacs-lisp-mode-map (kbd "C-h") 'paredit-backward-delete)
(define-key helm-map (kbd "C-h") 'paredit-backward-delete)

;; Kill
(define-key web-mode-map (kbd "C-k") 'wlh/web-mode-kill-sexp)

;; ---------------- Backward delete word
;; Kill line or region
(define-key company-active-map (kbd "C-h") 'backward-delete-char)
(define-key company-active-map (kbd "<tab>") 'company-complete-selection)
(define-key company-active-map (kbd "C-m") 'company-complete-selection)


(define-key company-active-map (kbd "C-i") 'company-complete-selection)
(global-set-key (kbd "<delete>") 'wlh/delete-backspace)
(define-key paredit-mode-map (kbd "<delete>") 'wlh/delete-backspace)

;; counsel-find-file
(global-set-key (kbd "C-x C-f") 'counsel-find-file)

;; Diff hl next / prev
(global-set-key (kbd "C-c C-n") 'diff-hl-next-hunk)
(define-key web-mode-map (kbd "C-c C-n") 'diff-hl-next-hunk)
(define-key php-mode-map (kbd "C-c C-n") 'diff-hl-next-hunk)

(global-set-key (kbd "C-c C-p") 'diff-hl-previous-hunk)
(define-key web-mode-map (kbd "C-c C-p") 'diff-hl-previous-hunk)
(define-key php-mode-map (kbd "C-c C-p") 'diff-hl-previous-hunk)

;; helm-imenu - M-r key binding come from Sublime M-r go to symbol 
(global-set-key (kbd "M-r") 'helm-imenu)
(define-key paredit-mode-map (kbd "M-r") 'helm-imenu)
(global-set-key (kbd "C-c i") 'counsel-imenu)
(define-key paredit-mode-map (kbd "C-c i") 'counsel-imenu)

;; mark
(global-set-key (kbd "C-c C-x C-d") 'crux-duplicate-and-comment-current-line-or-region)

;; Misc
(define-key org-mode-map (kbd "C-M-i") 'org-shifttab)
(global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-c C-M-s") 'vr/replace)
(global-set-key (kbd "M-=") 'just-one-space) ; Azerty equivalent of M-\

;; C-j
(define-key company-active-map (kbd "C-j") 'company-complete)
(define-key dired-mode-map (kbd "C-j") 'dired-find-file)
(define-key key-translation-map (kbd "C-j") (kbd "RET"))
(define-key shell-mode-map (kbd "C-j") 'paredit-newline)
(define-key emmet-mode-keymap (kbd "C-j") 'new-line-dwim)
(define-key helm-map (kbd "C-j") 'helm-confirm-and-exit-minibuffer)
(define-key ibuffer-mode-map (kbd "C-j") 'ibuffer-visit-buffer)
(define-key cider-repl-mode-map (kbd "C-j") 'paredit-newline)
(define-key cider-mode-map (kbd "C-c C-j") 'cider-macroexpand-1)

;; Search
(global-set-key (kbd "M-F") 'projectile-ag)

;; wgrep
(define-key compilation-mode-map (kbd "C-x w") 'wgrep-change-to-wgrep-mode)
(define-key compilation-mode-map (kbd "C-x s") 'wgrep-save-all-buffers)
(define-key compilation-mode-map (kbd "C-c C-c") 'wgrep-finish-edit)

;; TAB
;; (global-set-key (kbd "C-c TAB") 'wlh/insert-4spaces)
(define-key web-mode-map (kbd "TAB") 'indent-for-tab-command)
(define-key web-mode-map (kbd "TAB") 'wlh/web-mode-tab)

;; New line
;; (define-key prog-mode-map (kbd "RET") 'new-line-dwim)
;; (define-key c-mode-map (kbd "RET") 'new-line-dwim) ;; TODO Check error
(define-key lisp-mode-map (kbd "RET") 'paredit-newline)
(define-key css-mode-map (kbd "RET") 'newline)
(define-key php-mode-map (kbd "RET") 'new-line-dwim)
(define-key web-mode-map (kbd "RET") 'new-line-dwim)

;; (define-key web-mode-map(kbd "<return>") 'wlh/web-mode-new-line) ; Return key
;; (define-key web-mode-map (kbd "RET") 'wlh/web-mode-new-line) ; Used by C-j

;; (define-key web-mode-map(kbd "<return>") 'wlh/web-mode-new-line) ; Return key
;; (define-key web-mode-map (kbd "RET") 'wlh/web-mode-new-line) ; Used by C-j

;; Open line
(global-set-key (kbd "C-M-o") 'crux-smart-open-line)


;; Duplicate line
(global-set-key (kbd "C-x C-d") 'duplicate-start-of-line-or-region)
(global-set-key (kbd "M-D") 'duplicate-start-of-line-or-region)
(define-key paredit-mode-map (kbd "M-D") 'duplicate-start-of-line-or-region)

(define-key indent-rigidly-map [(shift tab)] 'indent-rigidly-left-to-tab-stop)
(define-key indent-rigidly-map [(tab)] 'indent-rigidly-right-to-tab-stop)

;; More convenient key binding instead of leaving the home row to get
;; left and right arrow. Inspired by jwiegley paredit keybinding.
(global-set-key (kbd "C-M-(") 'paredit-forward-barf-sexp)
(global-set-key (kbd "C-M-)") 'paredit-forward-slurp-sexp)

;; i-search
(define-key isearch-mode-map (kbd "C-'") 'avy-isearch)
(define-key org-mode-map (kbd "C-'") 'avy-isearch)
(define-key isearch-mode-map (kbd "C-h") 'isearch-delete-char)
(define-key isearch-mode-map (kbd "M-v") 'isearch-yank-pop)
(define-key isearch-mode-map (kbd "C-v") 'isearch-yank-pop)
(define-key isearch-mode-map (kbd "C-c C-s") 'swiper--from-isearch)
(define-key isearch-mode-map (kbd "C-z") 'isearch-yank-word-or-char) ; Used for azerty keyboard (qwerty z is more accessible than w)
(define-key isearch-mode-map (kbd "C-i") 'isearch-highlight-phrase)

;; help
(define-key help-mode-map (kbd "n") 'next-line)
(define-key help-mode-map (kbd "p") 'previous-line)
(define-key help-mode-map (kbd "f") 'forward-char)
(define-key help-mode-map (kbd "b") 'backward-char)

;; align-regexp
(global-set-key (kbd "C-x \\") 'align-regexp)

;; Browse the kill ring
(global-set-key (kbd "C-M-y") 'helm-show-kill-ring)

;; Display and edit occurances of regexp in buffer
(global-set-key (kbd "C-c o") 'occur)

;; imenu-list
(global-set-key (kbd "C-c <C-i>") 'imenu-list)

;; Webjump let's you quickly search google, wikipedia, emacs wiki
(global-set-key (kbd "C-x g") 'webjump)
(global-set-key (kbd "C-x M-g") 'browse-url-at-point)

;; vc
;; (global-set-key (kbd "C-x v f") 'vc-diff)

;; ---------------- Shell
(define-key shell-mode-map (kbd "RET") 'eshell-send-input)

(add-hook 'eshell-mode-hook 'm-eshell-hook)

;; expand-region
(global-set-key (kbd "C-à") 'er/expand-region) ; C-0 on azerty
(global-set-key (kbd "C-M-l") 'mark-sexp)

;; ---------------- Magit
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

;; Emmet
(global-set-key [control command shift j] 'emmet-expand-line)
(define-key web-mode-map [control command shift j] 'emmet-expand-line)
(define-key web-mode-map (kbd "C-M-S-j") 'emmet-expand-line)

;; ---------------- f keys
;; (global-set-key (kbd "<f2>") 'helm-mini)

;; ---------------- Window
;; Azerty bindings
(global-set-key (kbd "M-à") 'delete-window) ;; M-0
(define-key diff-mode-map (kbd "M-à") 'delete-window)

(global-set-key (kbd "M-&") 'delete-other-windows) ;; M-1
(define-key diff-mode-map (kbd "M-&") 'delete-other-windows)

(global-set-key (kbd "M-é") 'hrs/split-window-below-and-switch) ;; M-2
(define-key diff-mode-map (kbd "M-é") 'hrs/split-window-below-and-switch)

(global-set-key (kbd "M-\"") 'hrs/split-window-right-and-switch) ;; M-3
(define-key diff-mode-map (kbd "M-\"") 'hrs/split-window-right-and-switch)
(define-key paredit-mode-map (kbd "M-\"") 'hrs/split-window-right-and-switch)

(global-set-key (kbd "C-M-é") 'evil-window-move-very-bottom)
(global-set-key (kbd "C-M-\"") 'evil-window-move-far-left)

(global-set-key (kbd "M-X") 'other-frame) ; Same keybinding from osx switch window

;; other Window
(global-set-key (kbd "M-o") 'other-window)
(define-key diff-mode-map (kbd "M-o") 'other-window)
(define-key ggtags-navigation-map (kbd "M-o") 'other-window) ; Need to override ggtags map
(define-key ibuffer-mode-map (kbd "M-o") 'other-window)
(global-set-key [(meta shift o)] 'wlh/previous-window)

;; Projectile
(global-set-key (kbd "M-p") 'projectile-find-file)
(define-key ggtags-navigation-map (kbd "M-p") 'projectile-find-file)
(define-key highlight-symbol-nav-mode-map (kbd "M-p") 'projectile-find-file)
(define-key ibuffer-mode-map (kbd "M-p") 'projectile-find-file)

;; Find file
(global-set-key [(meta control shift p)] 'find-file-in-current-directory)

;; Find file at point
;; Update to use find-file-in-project-by-selected
;; (global-set-key (kbd "C->") 'ffap)

(global-set-key (kbd "C-.") 'find-file-in-project-by-selected)
(define-key php-mode-map [(control .)] 'find-file-in-project-by-selected)

(global-set-key (kbd "C-c p ' g") 'projectile-find-file-dwim-other-window) ; (C-c p 4 g on azerty)

;; ---------------- text
(define-key typescript-mode-map (kbd "C-:") "\C-e;")
(define-key php-mode-map (kbd "C-:") "\C-e;")
(define-key web-mode-map (kbd "C-:") "\C-e;")

;; PDF
(add-hook 'pdf-view-mode 'wlh/pdf-view-mode-hook)

;; Occur mode
(add-hook 'occur-mode-find-occurrence-hook 'recenter)

;; ----------- Buffer
(global-set-key (kbd "C-c C-b") 'projectile-ibuffer)
(define-key org-mode-map (kbd "C-c C-b") 'projectile-ibuffer)
(global-set-key (kbd "C-c b") 'projectile-switch-to-buffer)

;; Navigation between buffers
(global-set-key (kbd "C-`") 'next-buffer)
(global-set-key (kbd "C-M-`") 'winner-redo)

(global-set-key [C-M-tab] 'winner-undo)
(global-set-key [C-M-S-tab] 'winner-redo)

(global-set-key (kbd "C-ù") 'previous-buffer)
(global-set-key (kbd "C-M-ù") 'winner-undo)
;; (global-set-key (kbd "M-t") 'tabbar-new-tab)
(global-set-key (kbd "™") 'tabbar-close-other-tabs) ; ALT+SHIFT+t

;; Recentf
(global-set-key (kbd "C-c f") 'counsel-recentf) 
(global-set-key (kbd "C-c C-f") 'counsel-recentf) 

;; -------- org
(define-key org-mode-map (kbd "C-c C-b") 'org-backward-heading-same-level)
(define-key org-mode-map (kbd "π") 'org-metadown)
(define-key org-mode-map (kbd "È") 'org-metaup)
(global-set-key (kbd "C-c c") 'org-capture)

;; ------ zoom
(global-set-key (kbd "M--") 'text-scale-decrease)
(global-set-key (kbd "M-+") 'text-scale-increase)

;; ;; Comment
(global-set-key (kbd "M-/") 'comment-or-uncomment-region-or-line)
(global-set-key (kbd "M-;") 'comment-or-uncomment-region-or-line)
(define-key paredit-mode-map (kbd "M-;") 'comment-or-uncomment-region-or-line)

;; Better move paragraph / mark paragraph
(global-set-key (kbd "M-¨") 'lawlist-forward-paragraph)
(global-set-key (kbd "M-*") 'lawlist-backward-paragraph)

;; Paragraph
(global-set-key (kbd "M-¨") 'lawlist-backward-paragraph)
(global-set-key (kbd "M-*") 'lawlist-forward-paragraph)

;; Highlight symbol
(global-set-key (kbd "M-P") 'highlight-symbol-prev)
(define-key slime-mode-map (kbd "M-P") 'highlight-symbol-prev)
(define-key highlight-symbol-nav-mode-map (kbd "M-P") 'highlight-symbol-prev)
(define-key ggtags-navigation-map (kbd "M-P") 'highlight-symbol-prev)

;; Scroll commands
;; (global-set-key (kbd "C-x v U") 'wlh/svn-up-recursive)
;; (global-set-key (kbd "s-a") 'mark-whole-buffer)
(global-set-key (kbd "C-c C-s") 'helm-swoop)
(define-key web-mode-map (kbd "C-c C-s") 'swiper)
(define-key js2-mode-map (kbd "C-c C-s") 'swiper)
(define-key php-mode-map (kbd "C-c C-s") 'swiper)

;; (define-key js2-mode-map (kbd "<C-M-mouse-1>") 'xref-find-definitions)
(define-key js2-mode-map (kbd "<C-M-mouse-1>") 'dumb-jump-go)
(define-key js-mode-map (kbd "<C-M-mouse-1>") 'dumb-jump-go)
(define-key js2-mode-map (kbd "<C-M-mouse-3>") 'xref-pop-marker-stack)
(define-key js-mode-map (kbd "<C-M-mouse-3>") 'xref-pop-marker-stack)

;; Mouse
;; (global-set-key (kbd "<mouse-3>") 'mouse-major-mode-menu)

;; vc
;; (define-key vc-dir-mode-map (kbd "C-M-i") 'vc-dir-previous-directory)
;; (define-key diff-mode-map (kbd "C-M-i") 'diff-hunk-prev)
(define-key diff-mode-map (kbd "l") 'recenter-top-bottom)

;; avy
(global-set-key (kbd "C-\'") 'avy-goto-word-1)
(global-set-key (kbd "s-l") 'avy-goto-char-in-line)

;; Hippie expand
(global-set-key (kbd "M-i") 'hippie-expand)

;; ;; https://github.com/jacktasia/dumb-jump
(global-set-key (kbd "<M-backspace>") 'paredit-backward-kill-word)
(global-set-key (kbd "<backspace>") 'delete-backward-char) ;; Override paredit-backward-kill-word behaviour for backspace
(global-set-key [(meta shift /)] 'comment-or-uncomment-region-or-line)
(define-key occur-mode-map (kbd "n") 'next-line)
(define-key occur-mode-map (kbd "p") 'previous-line)
(global-set-key (kbd "C-/") 'ffap) ; Qwerty C-> for Azerty
(define-key undo-tree-map (kbd "C-/") 'ffap)

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)

;; ---------------- Markdown
(define-key markdown-mode-map (kbd "C-M-i") 'markdown-shifttab)

;; url
;; (global-set-key (kbd "M-m u") 'wlh/browse-url-at-point)

;; dumb-jump-go
(global-set-key (kbd "C-c M-.") 'dumb-jump-go)

;; Recenter
(global-set-key (kbd "C-l") 'wlh/recenter-top-bottom)

;; From prelude
(global-set-key (kbd "C-c r") 'crux-rename-buffer-and-file)
(global-set-key (kbd "C-c d") 'crux-delete-file-and-buffer)
(global-set-key (kbd "C-c s") 'crux-swap-windows)
(global-set-key (kbd "C-c r") 'crux-rename-buffer-and-file)
(global-set-key [(control shift up)] 'move-text-up)
(global-set-key [(control shift down)] 'move-text-down)
(global-set-key [(meta shift up)] 'move-text-up)
(global-set-key [(meta shift down)] 'move-text-down)

;; org (from prelude)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

;; Tab related behaviour
(global-set-key (kbd "C-x <tab>") 'indent-rigidly) ; Default emacs key binding
(global-set-key (kbd "C-c TAB") 'crux-indent-rigidly-and-copy-to-clipboard)
;; (global-set-key (kbd "<C-tab>") 'next-buffer)
;; (global-set-key (kbd "<C-S-tab>") 'previous-buffer)
(global-set-key (kbd "<C-tab>") 'wlh/next-buffer)
(global-set-key (kbd "<C-S-tab>") 'wlh/previous-buffer)

;; Bm
(global-set-key (kbd "C-é") 'point-to-register) ; C-2 on qwerty
(global-set-key (kbd "C-\"") 'jump-to-register) ; C-3 on qwerty
(global-set-key (kbd "C-&") 'xah-toggle-letter-case) ; (C-1 on azerty keyboard)

#+END_SRC
** theme/theme-light5
#+BEGIN_SRC emacs-lisp
(require 'css-mode)

(load "~/.emacs.d/lisp/theme/intellij-theme.el")

;; ------- Font
;; (set-frame-font "Office Code Pro:antialias=1")
;; (set-frame-font "Menlo")
;; (set-frame-font "Fira Sans")
(set-frame-font "Menlo")

;; Line spacing
;; https://stackoverflow.com/questions/26437034/emacs-line-height
;; (setq-default line-spacing 1)
;; (setq-default line-spacing 0.25)
;; (setq-default line-spacing 0.25)
;; (setq-default line-spacing 2) ; https://www.emacswiki.org/emacs/LineSpacing
;; (setq-default line-height 1.25)


;; (set-face-font 'default "Source Code Pro Semibold-12")
;; (set-face-font 'default "Menlo Semibold-12")
;; (set-face-font 'variable-pitch "Segoe UI Semibold-9")
;; (copy-face 'default 'fixed-pitch)


;; ----------------------------
;; Le hook provoque une modification du fichier à l'ouverture.
;; (defun wlh/theme-hook ()
;;   (interactive)
;;   (add-text-properties (point-min) (point-max)
;;                        '(line-spacing 2 line-height 1.25)))

;; (add-hook 'prog-mode-hook 'wlh/theme-hook)
;; (add-hook 'compilation-mode-hook 'wlh/theme-hook)


;; (setq-default line-spacing 2) ; https://www.emacswiki.org/emacs/LineSpacing
;; (setq-default line-height 1.25)

;; (defun wlh/theme-hook ()
;;   (interactive)
;;   (add-text-properties (point-min) (point-max)
;;                        '(line-spacing 2 line-height 1.25)))

;; (add-hook 'prog-mode-hook 'wlh/theme-hook)
;; (add-hook 'prog-mode-hook 'wlh/theme-hook)
;; (add-hook 'compilation-mode-hook 'wlh/theme-hook)


;; ----------------------------
(setq-default line-spacing 2) ; https://www.emacswiki.org/emacs/LineSpacing
(setq-default line-height 1.25)

;; (set-face-background 'scroll-bar "#fff")

;; Main background
;; (set-face-attribute 'default nil :background "#ffffff")
(set-face-attribute 'line-number-current-line nil :foreground "#000")

;; (custom-set-faces
;;  '(default ((t (:stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :family "Menlo")))))

;; Text selection
;; (set-face-attribute 'region nil :background "#b9d6fb")

;; Window-divider
(setq window-divider-default-bottom-width 10)
(setq window-divider-default-right-width 10)
(set-face-attribute 'window-divider-first-pixel nil :foreground "#fffefe")
(set-face-attribute 'window-divider-last-pixel nil :foreground "#fff")
(set-face-attribute 'window-divider nil :foreground "#fff")

(require 'dired-subtree)
(add-hook 'dired-mode-hook (lambda ()
                             (set-face-attribute 'dired-subtree-depth-1-face nil :background nil)
                             (set-face-attribute 'dired-subtree-depth-2-face nil :background nil)
                             (set-face-attribute 'dired-subtree-depth-3-face nil :background nil)
                             (set-face-attribute 'dired-subtree-depth-4-face nil :background nil)
                             (set-face-attribute 'dired-subtree-depth-5-face nil :background nil)
                             (set-face-attribute 'dired-subtree-depth-6-face nil :background nil)
                             ;; (set-face-attribute 'dired-directory nil :foreground "#d73a49" :background nil)
                             ;; (set-face-attribute 'dired-header nil :foreground "#6a737d" :background nil)
                             ))

;; (custom-set-faces
;;  '(rainbow-delimiters-depth-1-face ((t (:foreground "#000000" :weight bold))))
;;  '(rainbow-delimiters-depth-2-face ((t (:foreground "#ff00a0" :weight bold))))
;;  '(rainbow-delimiters-depth-3-face ((t (:foreground "#5abeee" :weight bold))))
;;  '(rainbow-delimiters-depth-4-face ((t (:foreground "#000000" :weight bold))))
;;  '(rainbow-delimiters-depth-5-face ((t (:foreground "#22988a" :weight bold))))
;;  '(rainbow-delimiters-depth-6-face ((t (:foreground "#cc99ff" :weight bold))))
;;  '(rainbow-delimiters-depth-7-face ((t (:foreground "#fa75e2" :weight bold))))
;;  '(rainbow-delimiters-depth-8-face ((t (:foreground "#55bdf0" :weight bold)))))

;; (set-face-attribute 'show-paren-match nil :background "#e2e2e2" :foreground "#fa75e2" :weight 'ultra-bold :underline "#ff00a0")

(require 'ediff)
;; (set-face-attribute 'ediff-fine-diff-A nil :background "#f3bebe")
;; (set-face-attribute 'ediff-fine-diff-B nil :background "#c2ff65")

;; (setq hl-sexp-background-color "#f4f4f4")

(setq show-paren-priority -50)
;; (set-face-attribute 'fringe nil :background "#fafafa" :slant 'normal)
;; (set-face-attribute 'window-divider nil :foreground "#fafafa")


;; -------
;; (set-face-attribute 'font-lock-keyword-face nil :foreground "#d73a49")
;; (set-face-attribute 'font-lock-type-face nil :foreground "#6c1883")
;; (set-face-attribute 'font-lock-variable-name-face nil :foreground "#6f42c1")
;; (set-face-attribute 'font-lock-function-name-face nil :foreground "#6f42c1")
;; (set-face-attribute 'highlight-defined-function-name-face nil :foreground "#005cc5")
;; (set-face-attribute 'highlight-defined-builtin-function-name-face nil :foreground "#d73a49")
;; (set-face-attribute 'font-lock-string-face nil :foreground "#032f62" :slant 'normal)
;; (set-face-attribute 'font-lock-comment-face nil :foreground "#6a737d")
;; (set-face-attribute 'font-lock-doc-face nil :foreground "#032f62")
;; (set-face-attribute 'font-lock-constant-face nil :foreground "#5fbfec")

;; ------- diff-hl
;; (set-face-attribute 'diff-hl-delete nil :background "#f2aad3")
;; (set-face-attribute 'diff-hl-change nil :background "#c3e1f2")
;; (set-face-attribute 'diff-hl-insert nil :background "#c7f1ca")

;; ------- css
;; (set-face-attribute 'css-property nil :foreground "#ff0101")
;; (set-face-attribute 'css-property nil :foreground "#0451a5")

;; ------- web-mode
(require 'web-mode)
;; (set-face-attribute 'web-mode-function-call-face nil :foreground "#000000")
;; (set-face-attribute 'web-mode-keyword-face nil :foreground "#e019b1")
;; (set-face-attribute 'web-mode-block-delimiter-face nil :foreground "#800000")
;; (set-face-attribute 'web-mode-variable-name-face nil :foreground "#2055a4")
;; (set-face-attribute 'web-mode-block-string-face nil :foreground "#9c251e")
;; (set-face-attribute 'web-mode-constant-face nil :foreground "#2e12a3")
;; (set-face-attribute 'web-mode-type-face nil :foreground "#6c1883")
;; (set-face-attribute 'web-mode-html-tag-face nil :foreground "#0074e8")
;; (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "#dd00a9")
;; (set-face-attribute 'web-mode-html-attr-value-face nil :foreground "#003eaa")
;; (set-face-attribute 'web-mode-javascript-string-face nil :foreground "#003eaa")
;; (set-face-attribute 'web-mode-current-element-highlight-face nil :background "transparent" :foreground "#000000" :weight 'ultra-bold)

;; ------- js2-mode
;; (set-face-attribute 'js2-external-variable nil :foreground "#2055a4")
;; (set-face-attribute 'js2-warning nil :foreground "#ff0000")

;; ------- bm
;; (when (boundp 'bm-face)
;;     (set-face-attribute 'bm-face nil :background "#e0e0e0" :foreground nil)
;;     (set-face-attribute 'bm-face nil :foreground "#000" :background nil :underline t))


;; ------- modeline
;; (set-face-attribute 'mode-line nil
;;                     :foreground "#ffffff"
;;                     :background "#007acc"
;;                     :height 100
;;                     :font "Menlo"
;;                     :box nil)

;; (set-face-attribute 'mode-line-inactive nil
;;                     :foreground "#666"
;;                     :background "#f3f3f3"
;;                     :font "Menlo"
;;                     :height 100
;;                     :box nil)

;; ------- php
(require 'php-mode)
;; (set-face-attribute 'php-annotations-annotation-face nil :foreground "#008000" :background nil :underline t)

;; ------- org
(defun wlh/org-mode-hook ()
  (set-face-attribute 'org-document-title nil :family "Sans Serif" :height 1.8 :foreground "#999")
  (set-face-attribute 'org-level-1 nil :height 1.3 :overline nil :foreground "#000" :background "#ffffff" :box nil)
  (set-face-attribute 'org-level-2 nil :height 1 :box nil :overline nil :foreground "#000" :background "#ffffff")
  (set-face-attribute 'org-level-3 nil :height 1 :box nil :overline nil :foreground "#000" :background "#ffffff")
  (set-face-attribute 'org-special-keyword nil :height 1 :foreground "#aeb7da" :background nil)
  (set-face-attribute 'org-document-info-keyword nil :height 1 :foreground "#b0dcff" :background nil)
  (set-face-attribute 'org-tag nil :height 0.8 :foreground "#98cf15" :box "#98cf15" :background "#f2fff7")
  (set-face-attribute 'org-block-begin-line nil :background "#e3e3e3" :foreground "#000000" :underline "#000000")
  (set-face-attribute 'org-block nil :background nil :foreground "#000000" :underline nil)
  (set-face-attribute 'org-block-end-line nil :background "#e3e3e3" :foreground "#000000" :underline "#000000")

  (if (bound-and-true-p org-block-background)
      (set-face-attribute 'org-block-background nil :background "#f5f5f5"))

  
  (set-face-attribute 'org-checkbox-statistics-todo  nil :height 1))
(setq org-confirm-babel-evaluate nil)

(add-hook 'org-mode-hook 'wlh/org-mode-hook)


;; ------- diff
;; (defun wlh/diff-mode-hook ()
;;   (set-face-attribute 'diff-header nil :background "#ccc" :foreground "#000")
;;   (set-face-attribute 'diff-file-header nil :background nil :foreground "#000000" :weight 'ultra-bold)
;;   (set-face-attribute 'diff-hunk-header nil :background "#ccc" :foreground "#000" :box "#666")
;;   (set-face-attribute 'diff-indicator-removed nil :background nil :foreground "#86d9fb")
;;   (set-face-attribute 'diff-indicator-added nil :background nil :foreground "#86d9fb")
;;   (set-face-attribute 'diff-removed nil :background "#ffffff" :foreground "#ff536a")
;;   (set-face-attribute 'diff-added nil :background "#ffffff" :foreground "#98cf15")
;;   (set-face-attribute 'diff-context nil :background "#ffffff" :foreground "#ccc")
;;   (set-face-attribute 'diff-header nil :background "#ffffff" :foreground "#000")
;;   (set-face-attribute 'diff-refine-added nil :background "#e4fee1" :foreground "#0cba3d")

;;   (set-face-background 'git-gutter:modified "#ff7200")
;;   (set-face-foreground 'git-gutter:modified "#ff7200")
;;   (set-face-background 'git-gutter:added "#92de37")
;;   (set-face-foreground 'git-gutter:added "#92de37")
;;   (set-face-background 'git-gutter:deleted "#f82167")
;;   (set-face-foreground 'git-gutter:deleted "#f82167")
;;   )

;; (add-hook 'diff-mode-hook 'wlh/diff-mode-hook)


;; ------ Evil cursor
;; (setq evil-emacs-state-cursor '("#ff00d2" box))
;; (setq evil-normal-state-cursor '("#000000" box))
;; (setq evil-visual-state-cursor '("#ffffff" box))
;; (setq evil-insert-state-cursor '("red" bar))
;; (setq evil-replace-state-cursor '("red" bar))
;; (setq evil-operator-state-cursor '("red" hollow))


;; ------- company
;; (set-face-attribute 'company-tooltip nil :background "#fffff" :foreground "#000000" :weight 'normal)
;; (set-face-attribute 'company-scrollbar-bg nil :background "#e9e9e9")
;; (set-face-attribute 'company-scrollbar-fg nil :background "#ccc")
;; (set-face-attribute 'company-preview-common nil :foreground "#ccc" :background nil)
;; (set-face-attribute 'company-preview-search nil :foreground "#ccc" :background nil)
;; (set-face-attribute 'company-tooltip-annotation nil :foreground "#62c0ea" :background nil)
;; (set-face-attribute 'company-tooltip-common nil :foreground "#62c0ea" :background nil)
;; (set-face-attribute 'company-tooltip-selection nil :foreground "#62c0ea" :background "#e9e9e9")


;; Tabbar
(require 'tabbar)
;; ;; Tabbar settings
;; (set-face-attribute
;;  'tabbar-default nil
;;  :background "#ececec"
;;  :foreground "#000"
;;  :box '(:line-width 2 :color "#ececec" :style nil))
;; (set-face-attribute
;;  'tabbar-unselected nil
;;  :background "#ececec"
;;  :foreground "#888"
;;  :box '(:line-width 8 :color "#ececec" :style nil))
;; (set-face-attribute
;;  'tabbar-selected nil
;;  :background "white"
;;  :foreground "black"
;;  :box '(:line-width 8 :color "white" :style nil))
;; (set-face-attribute
;;  'tabbar-highlight nil
;;  :background "white"
;;  :foreground "black"
;;  :underline nil
;;  :box '(:line-width 8 :color "white" :style nil))
;; (set-face-attribute
;;  'tabbar-button nil
;;  :box '(:line-width 1 :color "white" :style nil))
;; (set-face-attribute
;;  'tabbar-separator nil
;;  :background "white"
;;  :height 0.6)

;; Change padding of the tabs
;; we also need to set separator to avoid overlapping tabs by highlighted tabs
(custom-set-variables
 '(tabbar-separator (quote (0.5))))

;; ;; adding spaces
;; (defun tabbar-buffer-tab-label (tab)
;;   "Return a label for TAB.
;; That is, a string used to represent it on the tab bar."
;;   (let ((label  (if tabbar--buffer-show-groups
;;                     (format "[%s]  " (tabbar-tab-tabset tab))
;;                   (format "%s  " (tabbar-tab-value tab)))))
;;     ;; Unless the tab bar auto scrolls to keep the selected tab
;;     ;; visible, shorten the tab label to keep as many tabs as possible
;;     ;; in the visible area of the tab bar.
;;     (if tabbar-auto-scroll-flag
;;         label
;;       (tabbar-shorten
;;        label (max 1 (/ (window-width)
;;                        (length (tabbar-view
;;                                 (tabbar-current-tabset)))))))))

;; (tabbar-mode 1)

;; ------ ivy
(require 'ivy)
;; (add-hook 'ivy-mode-hook (lambda ()
;;                            (set-face-attribute 'ivy-minibuffer-match-face-1 nil :foreground "#d73a49" :background nil :underline t)
;;                            (set-face-attribute 'ivy-minibuffer-match-face-2 nil :foreground "#d73a49" :background nil :underline t)
;;                            (set-face-attribute 'ivy-minibuffer-match-face-3 nil :foreground "#d73a49" :background nil :underline t)
;;                            (set-face-attribute 'ivy-minibuffer-match-face-4 nil :foreground "#d73a49" :background nil :underline t)))

;; -- Group
;; (set-face-attribute 'custom-group-tag nil :foreground "#000")
;; (set-face-attribute 'custom-variable-tag nil :foreground "#000")


;; Line padding
;; (defun wlh/prog-mode-line-padding-hook ()
;;   (add-text-properties (point-min) (point-max)
;;                      '(line-spacing 0.25 line-height 1.25)))

;; (add-hook 'prog-mode-hook 'wlh/prog-mode-line-padding-hook)
;; (add-hook 'text-mode-hook 'wlh/prog-mode-line-padding-hook)



;; ------ log
#+END_SRC
** lang/prog
#+BEGIN_SRC emacs-lisp
(defun wlh/prog-hook ()
  (display-line-numbers-mode)
  (hl-line-mode)
  (auto-highlight-symbol-mode))

;; (add-hook 'c-mode-common-hook 'wlh/prog-hook)
;; (add-hook 'emacs-lisp-mode-hook 'wlh/prog-hook)
;; (add-hook 'web-mode-hook 'wlh/prog-hook)
;; (add-hook 'js2-mode-hook 'wlh/prog-hook)
;; (add-hook 'css-mode-hook 'wlh/prog-hook)
;; (add-hook 'typescript-mode-hook 'wlh/prog-hook)
(add-hook 'prog-mode-hook 'wlh/prog-hook)
(add-hook 'web-mode-hook 'wlh/prog-hook)

#+END_SRC
** lang/typescript
#+BEGIN_SRC emacs-lisp
(require 'typescript-mode)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1)
  (setq company-minimum-prefix-length 0))

(setq company-tooltip-align-annotations t)

(add-hook 'typescript-mode-hook 'setup-tide-mode)

#+END_SRC
** lang/javascript_modern
#+BEGIN_SRC emacs-lisp
(defun wlh/js-mode ()
  (interactive)
  
  (tide-mode)
  (tide-setup)
  (tide-hl-identifier-mode +1)

  (eldoc-mode +1)
  
  (company-mode 1)
  (set (make-local-variable 'company-minimum-prefix-length) 0)
  (set (make-local-variable 'company-idle-delay) 0)
  
  (set (make-local-variable 'js2-basic-offset) 4)

  ;; Needed, sometimes autopair is not enough
  (set (make-local-variable 'smartparens-mode) t)
  (set (make-local-variable 'paredit-space-for-delimiter-predicates) 0)
  (set (make-local-variable 'flycheck-mode) t)
  (set (make-local-variable 'yas-indent-line) 'auto)

  (define-key js2-mode-map (kbd "<f2>") 'js2r-rename-var)

  ;; (setq-default js2-auto-indent-p nil)
  (setq-default js2-idle-timer-delay 0.1
                js2-show-parse-errors t
                js2-auto-indent-p t
                js2-skip-preprocessor-directives t
                js2-highlight-external-variables t
                js2-mode-show-parse-errors t)
  
  ;; (setq-default js-switch-indent-offset 4)
  ;; (setq-default js2-idle-timer-delay 0.1)
  ;; (setq-default js2-global-externs '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
  ;; (setq-default js2-auto-indent-p t)
  ;; ;; (setq js2-missing-semi-one-line-override 1)
  ;; (setq js2-strict-missing-semi-warning t)
  ;; (setq js2-highlight-unused-variables-mode t)
  
    )

(add-hook 'js-mode-hook 'wlh/js-mode)
(add-hook 'js2-mode-hook 'wlh/js-mode)

#+END_SRC
** lang/php
#+BEGIN_SRC emacs-lisp
;; (require 'cl)
;; (require 'php-mode)

;; (defun wlh/php-mode-hook ()
;;   (interactive)
;;   ;; (nlinum-mode t)
;;   ;; (ggtags-mode 1)
;;   )
;; (add-hook 'php-mode-hook 'wlh/php-mode-hook)

#+END_SRC
** lang/css
#+BEGIN_SRC emacs-lisp
(require 'css-mode)

(defun wlh/css-open-declaration ()
  (interactive)
  (insert " {\n}")
  (backward-char)
  (crux-smart-open-line-above)
  (company-mode))

;; (defun wlh/css-mode-hook ()
;;   ;; (smartparens-mode)
;;   ;; (rainbow-mode)
;;   )

;; (add-hook 'css-mode-hook 'wlh/css-mode-hook)
(define-key css-mode-map (kbd "C-c C-j") 'wlh/css-open-declaration)

#+END_SRC
** lang/web
#+BEGIN_SRC emacs-lisp
(require 'web-mode)

(defun wlh/web-mode ()
  (emmet-mode t)
  (flycheck-mode)
  (line-number-mode))

(defun wlh/web-mode-indent ()
  (interactive)
  (emmet-expand-yas)
  (message "ok"))

(setq web-mode-enable-block-partial-invalidation t)
(setq web-mode-enable-css-colorization t)
(setq web-mode-enable-current-column-highlight nil) ; Update : L effet visuel n est pas reelement convaincant
(setq web-mode-enable-current-element-highlight t) ; Good

;; Add auto-pair
(setq web-mode-extra-auto-pairs
      '(("erb"  . (("beg" "end")))
        ("php"  . (("beg" "end")
                   ("beg" "end")))))

;; css colorization
(setq web-mode-enable-css-colorization t)
;; (setq web-mode-enable-auto-indentation nil) ; Disable auto indent in web mode (can be very slow)
(setq web-mode-enable-auto-indentation nil) ; Disable auto indent in web mode (can be very slow)
(setq web-mode-markup-indent-offset 4)
(setq web-mode-css-indent-offset 4)
(setq web-mode-code-indent-offset 4)
(setq web-mode-style-padding 4)
(setq web-mode-script-padding 0)
(setq web-mode-block-padding 0)

;; Emmet
(require 'emmet-mode)
(setq emmet-preview-default nil)

(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode)
(add-hook 'web-mode-hook 'emmet-mode)
(add-hook 'web-mode-hook 'wlh/web-mode)
(define-key web-mode-map (kbd "C-M-i") 'wlh/web-mode-indent)

#+END_SRC
** lang/lisp
#+BEGIN_SRC emacs-lisp
(require 'slime)
(require 'slime-autoloads)
(require 'ac-slime)
(require 'redshank)
(require 'erefactor)

(defun wlh/lisp-mode-hook ()
  (define-key slime-prefix-map (kbd "M-h") 'slime-documentation-lookup)
  (highlight-defined-mode)
  (aggressive-indent-mode)
  (highlight-symbol-mode)
  (define-key lisp-mode-map (kbd "C-c M-j") 'slime) ; Same as Clojure Cider connect to repl ! 
  (redshank-mode))

(defun wlh/inferior-scheme-mode-hook ()
  (paredit-mode))

(setq inferior-lisp-program "sbcl")
(slime-setup '(slime-fancy))

(add-hook 'slime-load-hook 'wlh/slime-mode-hook)
(add-hook 'lisp-mode-hook 'wlh/lisp-mode-hook)
(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode)))
(add-hook 'inferior-scheme-mode-hook 'wlh/inferior-scheme-mode-hook)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode))

#+END_SRC
** lang/clojure
#+BEGIN_SRC emacs-lisp
(require 'cider)
(require 'clojure-snippets)
;; (require 'auto-indent-mode)

;; Specify history file
(setq cider-history-file "~/.emacs.d/nrepl-history")

;; Don't prompt when go to symbol
(setq cider-prompt-for-symbol nil)

;; nicer font lock in REPL
(setq cider-repl-use-clojure-font-lock t)

;; Prevent the auto-display of the REPL buffer in a separate window after connection is established
(setq cider-repl-pop-to-buffer-on-connect nil)

;; Pretty print results in repl
(setq cider-repl-use-pretty-printing t)

;; Don't prompt for symbols
;; (setq cider-prompt-for-symbol nil)

;; result prefix for the REPL
(setq cider-repl-result-prefix ";; => ")

;; never ending REPL history
(setq cider-repl-wrap-history t)

;; looong history
(setq cider-repl-history-size 3000)

;; ;; cljrefactor -------------------
;; Disable atm
(require 'clj-refactor)

;; ;; no auto sort
(setq cljr-auto-sort-ns nil)

;; ;; do not prefer prefixes when using clean-ns
(setq cljr-favor-prefix-notation nil)
(setq cljr-warn-on-eval nil)


;; Flycheck ---------------
;; (add-to-list 'load-path (concat user-emacs-directory "site-lisp/" "flycheck-20150207.329"))

;; (require-package 'let-alist)
;; (require-package 'flycheck-clojure)

;; (require 'flycheck)

;; (eval-after-load 'flycheck '(flycheck-clojure-setup))


;; Paredit ---------------------
(require 'paredit)
(add-hook 'lisp-mode-hook #'paredit-mode)
(add-hook 'emacs-lisp-mode-hook #'paredit-mode)
(add-hook 'clojure-mode-hook #'paredit-mode)
(add-hook 'cider-repl-mode-hook #'paredit-mode)



;; Hooks ----------------------
(defun wlh/clojure-mode-hook ()
  (interactive)
  (clj-refactor-mode 1)
  (hl-line-mode)
  ;; (auto-indent-mode) ; Package not found
  ;; (typed-clojure-mode)
  (auto-indent-mode)
  (aggressive-indent-mode)
  (display-line-numbers-mode)
  
  ;; insert keybinding setup here
  (cljr-add-keybindings-with-prefix "C-c C-l")
  (define-key clojure-mode-map (kbd "RET") 'newline-and-indent))

(add-hook 'clojure-mode-hook 'wlh/clojure-mode-hook)
(add-hook 'cider-mode-hook (lambda ()
            (eldoc-mode)
            (company-mode)
            (highlight-symbol-mode)
            (company-quickhelp-mode)
            (setq cider-special-mode-truncate-lines nil)
            
            ;; (setq company-minimum-prefix-length 2)
            ;; (setq company-idle-delay 0.8)

            ;; (setq company-minimum-prefix-length 0)
            ;; (setq company-idle-delay 0)

            (setq company-minimum-prefix-length 20)
            (setq company-idle-delay 0)
            
            (helm-cider-mode 1)
            (cider-company-enable-fuzzy-completion)
            (define-key mc/keymap (kbd "C-c C-v") 'cider-eval-buffer)
            (yas-minor-mode)))

(add-hook 'cider-repl-mode-hook (lambda ()
                                  (company-mode t)
                                  ;; (cider-company-enable-fuzzy-completion)
                                  ))

;; https://cider.readthedocs.io/en/latest/code_completion/
;; (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)

;; Indent and highlight more commands
(put-clojure-indent 'match 'defun)

;; Defuns ---------------------------------
;; Cycle between () {} []
(defun live-delete-and-extract-sexp ()
  "Delete the sexp and return it."
  (interactive)
  (let* ((begin (point)))
    (forward-sexp)
    (let* ((result (buffer-substring-no-properties begin (point))))
      (delete-region begin (point))
      result)))

(defun live-cycle-clj-coll ()
  "Convert the coll at (point) from (x) -> {x} -> [x] -> (x) recur"
  (interactive)
  (let* ((original-point (point)))
    (while (and (> (point) 1)
                (not (equal "(" (buffer-substring-no-properties (point) (+ 1 (point)))))
                (not (equal "{" (buffer-substring-no-properties (point) (+ 1 (point)))))
                (not (equal "[" (buffer-substring-no-properties (point) (+ 1 (point))))))
      (backward-char))
    (cond
     ((equal "(" (buffer-substring-no-properties (point) (+ 1 (point))))
      (insert "{" (substring (live-delete-and-extract-sexp) 1 -1) "}"))
     ((equal "{" (buffer-substring-no-properties (point) (+ 1 (point))))
      (insert "[" (substring (live-delete-and-extract-sexp) 1 -1) "]"))
     ((equal "[" (buffer-substring-no-properties (point) (+ 1 (point))))
      (insert "(" (substring (live-delete-and-extract-sexp) 1 -1) ")"))
     ((equal 1 (point))
      (message "beginning of file reached, this was probably a mistake.")))
    (goto-char original-point)))

;; Warn about missing nREPL instead of doing stupid things
(defun nrepl-warn-when-not-connected ()
  (interactive)
  (message "Oops! You're not connected to an nREPL server. Please run M-x cider or M-x cider-jack-in to connect."))

(define-key clojure-mode-map (kbd "C-^") 'live-cycle-clj-coll)
(define-key clojure-mode-map (kbd "C-M-x")   'nrepl-warn-when-not-connected)
(define-key clojure-mode-map (kbd "C-x C-e") 'nrepl-warn-when-not-connected)

#+END_SRC
** lang/react
#+BEGIN_SRC emacs-lisp
(require 'react-snippets)
(require 'web-mode)
(require 'tide)

(defun wlh/add-minor-mode-for-react ()
  (when (and (stringp buffer-file-name)
             (or (string-match "\\.jsx\\'" buffer-file-name)
                 (string-match "components\\/.*\\.js\\'" buffer-file-name)))
    (setup-tide-mode)))

(add-hook 'find-file-hook 'wlh/add-minor-mode-for-react)

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))

(eval-after-load 'js2-mode
  '(sp-local-pair 'js2-mode "<" ">"))

(global-set-key (kbd "<f2>") nil)
(define-key tide-mode-map (kbd "<f2>") 'tide-rename-symbol)
(define-key tide-mode-map (kbd "C-c M-j") 'tide-restart-server)

;; https://github.com/ananthakumaran/tide
(flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
#+END_SRC
** init
#+BEGIN_SRC emacs-lisp
(window-divider-mode-apply 1)
(show-paren-mode)
(winner-mode t)
(tabbar-mode 0)
(eshell)

#+END_SRC